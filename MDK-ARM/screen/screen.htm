<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [screen\screen.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image screen\screen.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Sun Sep 21 10:54:54 2025
<BR><P>
<H3>Maximum Stack Usage =       1296 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
lv_meter_event &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[c]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">BusFault_Handler</a><BR>
 <LI><a href="#[b]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">NMI_Handler</a><BR>
 <LI><a href="#[d]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">UsageFault_Handler</a><BR>
 <LI><a href="#[272]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[272]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[3f5]">lv_obj_get_screen</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f5]">lv_obj_get_screen</a><BR>
 <LI><a href="#[42a]">lv_obj_transform_point</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42a]">lv_obj_transform_point</a><BR>
 <LI><a href="#[347]">event_send_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[347]">event_send_core</a><BR>
 <LI><a href="#[47f]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47f]">refresh_children_style</a><BR>
 <LI><a href="#[39b]">layout_update_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[39b]">layout_update_core</a><BR>
 <LI><a href="#[2bb]">lv_obj_move_children_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2bb]">lv_obj_move_children_by</a><BR>
 <LI><a href="#[485]">lv_obj_scroll_by_bounded</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[276]">lv_obj_update_layout</a><BR>
 <LI><a href="#[2d0]">_vsnprintf</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d0]">_vsnprintf</a><BR>
 <LI><a href="#[2d5]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d5]">apply_theme</a><BR>
 <LI><a href="#[466]">lv_obj_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[466]">lv_obj_construct</a><BR>
 <LI><a href="#[47d]">lv_obj_redraw</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47e]">refr_obj</a><BR>
 <LI><a href="#[47e]">refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47e]">refr_obj</a><BR>
 <LI><a href="#[4ab]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4ab]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[47a]">obj_valid_child</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47a]">obj_valid_child</a><BR>
 <LI><a href="#[469]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[469]">obj_del_core</a><BR>
 <LI><a href="#[38c]">lv_textarea_add_text</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[433]">lv_textarea_add_char</a><BR>
 <LI><a href="#[38b]">insert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[38c]">lv_textarea_add_text</a><BR>
 <LI><a href="#[484]">report_style_change_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[484]">report_style_change_core</a><BR>
 <LI><a href="#[383]">lv_indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[383]">lv_indev_search_obj</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6a]">ADC_DMAConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[6c]">ADC_DMAError</a> from stm32f4xx_hal_adc.o(i.ADC_DMAError) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[6b]">ADC_DMAHalfConvCplt</a> from stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt) referenced from stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[60]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream4_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream5_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream5_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream6_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6e]">HAL_I2SEx_FullDuplex_IRQHandler</a> from stm32f4xx_hal_i2s_ex.o(i.HAL_I2SEx_FullDuplex_IRQHandler) referenced from stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
 <LI><a href="#[61]">HASH_RNG_IRQHandler</a> from stm32f4xx_it.o(i.HASH_RNG_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[71]">I2S_DMAError</a> from stm32f4xx_hal_i2s.o(i.I2S_DMAError) referenced from stm32f4xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
 <LI><a href="#[70]">I2S_DMATxCplt</a> from stm32f4xx_hal_i2s.o(i.I2S_DMATxCplt) referenced from stm32f4xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
 <LI><a href="#[6f]">I2S_DMATxHalfCplt</a> from stm32f4xx_hal_i2s.o(i.I2S_DMATxHalfCplt) referenced from stm32f4xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
 <LI><a href="#[6d]">I2S_IRQHandler</a> from stm32f4xx_hal_i2s.o(i.I2S_IRQHandler) referenced from stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">OTG_FS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from stm32f4xx_it.o(i.SDIO_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[75]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[75]">SD_DMAError</a> from stm32f4xx_hal_sd.o(i.SD_DMAError) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[74]">SD_DMAReceiveCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
 <LI><a href="#[73]">SD_DMARxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMARxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[76]">SD_DMATransmitCplt</a> from stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
 <LI><a href="#[72]">SD_DMATxAbort</a> from stm32f4xx_hal_sd.o(i.SD_DMATxAbort) referenced from stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
 <LI><a href="#[168]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[16c]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[16a]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[169]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[16b]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from stm32f4xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from stm32f4xx_it.o(i.SPI3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[77]">SPI_DMAAbortOnError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[7a]">SPI_DMAError</a> from stm32f4xx_hal_spi.o(i.SPI_DMAError) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[78]">SPI_DMAHalfTransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[79]">SPI_DMATransmitCplt</a> from stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt) referenced from stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
 <LI><a href="#[e]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[11a]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[11]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[14]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from stm32f4xx_it.o(i.TIM2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7b]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[37]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from stm32f4xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from stm32f4xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">USART6_IRQHandler</a> from stm32f4xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[65]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[c4]">_lv_disp_refr_timer</a> from lv_refr.o(i._lv_disp_refr_timer) referenced from lv_hal_disp.o(i.lv_disp_drv_register)
 <LI><a href="#[e4]">_lv_ll_get_head</a> from lv_ll.o(i._lv_ll_get_head) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[e4]">_lv_ll_get_head</a> from lv_ll.o(i._lv_ll_get_head) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[e4]">_lv_ll_get_head</a> from lv_ll.o(i._lv_ll_get_head) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[e3]">_lv_ll_get_next</a> from lv_ll.o(i._lv_ll_get_next) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[e3]">_lv_ll_get_next</a> from lv_ll.o(i._lv_ll_get_next) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[e3]">_lv_ll_get_next</a> from lv_ll.o(i._lv_ll_get_next) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[e1]">_lv_ll_get_prev</a> from lv_ll.o(i._lv_ll_get_prev) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[e1]">_lv_ll_get_prev</a> from lv_ll.o(i._lv_ll_get_prev) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[e1]">_lv_ll_get_prev</a> from lv_ll.o(i._lv_ll_get_prev) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[e2]">_lv_ll_get_tail</a> from lv_ll.o(i._lv_ll_get_tail) referenced from lv_group.o(i.lv_group_add_obj)
 <LI><a href="#[e2]">_lv_ll_get_tail</a> from lv_ll.o(i._lv_ll_get_tail) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[e2]">_lv_ll_get_tail</a> from lv_ll.o(i._lv_ll_get_tail) referenced from lv_group.o(i.lv_group_remove_obj)
 <LI><a href="#[f8]">_out_buffer</a> from lv_printf.o(i._out_buffer) referenced from lv_printf.o(i.lv_snprintf)
 <LI><a href="#[f8]">_out_buffer</a> from lv_printf.o(i._out_buffer) referenced from lv_printf.o(i.lv_vsnprintf)
 <LI><a href="#[86]">_out_null</a> from lv_printf.o(i._out_null) referenced from lv_printf.o(i._vsnprintf)
 <LI><a href="#[67]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[68]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[66]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[7d]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[109]">adc_task</a> from lvgl_demo.o(i.adc_task) referenced from lvgl_demo.o(i.lvgl_demo_init)
 <LI><a href="#[7e]">anim_timer</a> from lv_anim.o(i.anim_timer) referenced from lv_anim.o(i._lv_anim_core_init)
 <LI><a href="#[f9]">arc_anim_end_angle</a> from lv_spinner.o(i.arc_anim_end_angle) referenced from lv_spinner.o(i.lv_spinner_constructor)
 <LI><a href="#[fb]">arc_anim_start_angle</a> from lv_spinner.o(i.arc_anim_start_angle) referenced from lv_spinner.o(i.lv_spinner_constructor)
 <LI><a href="#[ff]">btns_value_changed_event_cb</a> from lv_tabview.o(i.btns_value_changed_event_cb) referenced from lv_tabview.o(i.lv_tabview_constructor)
 <LI><a href="#[87]">bullet_update_cb</a> from lvgl_demo.o(i.bullet_update_cb) referenced from lvgl_demo.o(i.bullet_system_init)
 <LI><a href="#[8e]">character_btn_1_event_handler</a> from events_init.o(i.character_btn_1_event_handler) referenced from events_init.o(i.events_init_character)
 <LI><a href="#[8f]">character_btn_3_event_handler</a> from events_init.o(i.character_btn_3_event_handler) referenced from events_init.o(i.events_init_character)
 <LI><a href="#[8c]">character_img_1_event_handler</a> from events_init.o(i.character_img_1_event_handler) referenced from events_init.o(i.events_init_character)
 <LI><a href="#[8d]">character_img_2_event_handler</a> from events_init.o(i.character_img_2_event_handler) referenced from events_init.o(i.events_init_character)
 <LI><a href="#[c8]">color_blend_true_color_additive</a> from lv_draw_sw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic)
 <LI><a href="#[ca]">color_blend_true_color_multiply</a> from lv_draw_sw_blend.o(i.color_blend_true_color_multiply) referenced from lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic)
 <LI><a href="#[c9]">color_blend_true_color_subtractive</a> from lv_draw_sw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic)
 <LI><a href="#[100]">cont_scroll_end_event_cb</a> from lv_tabview.o(i.cont_scroll_end_event_cb) referenced from lv_tabview.o(i.lv_tabview_constructor)
 <LI><a href="#[bc]">cursor_blink_anim_cb</a> from lv_textarea.o(i.cursor_blink_anim_cb) referenced from lv_textarea.o(i.label_event_cb)
 <LI><a href="#[bc]">cursor_blink_anim_cb</a> from lv_textarea.o(i.cursor_blink_anim_cb) referenced from lv_textarea.o(i.lv_textarea_constructor)
 <LI><a href="#[bc]">cursor_blink_anim_cb</a> from lv_textarea.o(i.cursor_blink_anim_cb) referenced from lv_textarea.o(i.lv_textarea_event)
 <LI><a href="#[bc]">cursor_blink_anim_cb</a> from lv_textarea.o(i.cursor_blink_anim_cb) referenced from lv_textarea.o(i.lv_textarea_set_cursor_pos)
 <LI><a href="#[116]">dark_color_filter_cb</a> from lv_theme_default.o(i.dark_color_filter_cb) referenced from lv_theme_default.o(i.style_init)
 <LI><a href="#[106]">default_walker</a> from lv_tlsf.o(i.default_walker) referenced from lv_tlsf.o(i.lv_tlsf_walk_pool)
 <LI><a href="#[f0]">disp_flush</a> from lv_port_disp.o(i.disp_flush) referenced from lv_port_disp.o(i.lv_port_disp_init)
 <LI><a href="#[c2]">draw_part_begin_event_cb</a> from lv_calendar.o(i.draw_part_begin_event_cb) referenced from lv_calendar.o(i.lv_calendar_constructor)
 <LI><a href="#[91]">end_btn_2_event_handler</a> from events_init.o(i.end_btn_2_event_handler) referenced from events_init.o(i.events_init_end)
 <LI><a href="#[90]">end_label_3_event_handler</a> from events_init.o(i.end_label_3_event_handler) referenced from events_init.o(i.events_init_end)
 <LI><a href="#[dd]">find_item</a> from lv_draw_sw_gradient.o(i.find_item) referenced from lv_draw_sw_gradient.o(i.lv_gradient_get)
 <LI><a href="#[de]">find_oldest_item_life</a> from lv_draw_sw_gradient.o(i.find_oldest_item_life) referenced from lv_draw_sw_gradient.o(i.lv_gradient_get)
 <LI><a href="#[da]">flex_update</a> from lv_flex.o(i.flex_update) referenced from lv_flex.o(i.lv_flex_init)
 <LI><a href="#[7c]">fputc</a> from uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[7c]">fputc</a> from uart.o(i.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[af]">game1_async_cb</a> from events_init.o(i.game1_async_cb) referenced from events_init.o(i.game1_event_handler)
 <LI><a href="#[99]">game1_event_handler</a> from events_init.o(i.game1_event_handler) referenced from events_init.o(i.events_init_game1)
 <LI><a href="#[b0]">game2_async_cb</a> from events_init.o(i.game2_async_cb) referenced from events_init.o(i.game2_event_handler)
 <LI><a href="#[9a]">game2_event_handler</a> from events_init.o(i.game2_event_handler) referenced from events_init.o(i.events_init_game2)
 <LI><a href="#[b1]">game3_async_cb</a> from events_init.o(i.game3_async_cb) referenced from events_init.o(i.game3_event_handler)
 <LI><a href="#[9b]">game3_event_handler</a> from events_init.o(i.game3_event_handler) referenced from events_init.o(i.events_init_game3)
 <LI><a href="#[b2]">game4_async_cb</a> from events_init.o(i.game4_async_cb) referenced from events_init.o(i.game4_event_handler)
 <LI><a href="#[9c]">game4_event_handler</a> from events_init.o(i.game4_event_handler) referenced from events_init.o(i.events_init_game4)
 <LI><a href="#[b3]">game5_async_cb</a> from events_init.o(i.game5_async_cb) referenced from events_init.o(i.game5_event_handler)
 <LI><a href="#[9d]">game5_event_handler</a> from events_init.o(i.game5_event_handler) referenced from events_init.o(i.events_init_game5)
 <LI><a href="#[93]">game_btn_1_event_handler</a> from events_init.o(i.game_btn_1_event_handler) referenced from events_init.o(i.events_init_game)
 <LI><a href="#[94]">game_btn_2_event_handler</a> from events_init.o(i.game_btn_2_event_handler) referenced from events_init.o(i.events_init_game)
 <LI><a href="#[95]">game_btn_3_event_handler</a> from events_init.o(i.game_btn_3_event_handler) referenced from events_init.o(i.events_init_game)
 <LI><a href="#[96]">game_btn_4_event_handler</a> from events_init.o(i.game_btn_4_event_handler) referenced from events_init.o(i.events_init_game)
 <LI><a href="#[97]">game_btn_5_event_handler</a> from events_init.o(i.game_btn_5_event_handler) referenced from events_init.o(i.events_init_game)
 <LI><a href="#[98]">game_btn_6_event_handler</a> from events_init.o(i.game_btn_6_event_handler) referenced from events_init.o(i.events_init_game)
 <LI><a href="#[92]">game_event_handler</a> from events_init.o(i.game_event_handler) referenced from events_init.o(i.events_init_game)
 <LI><a href="#[117]">grey_filter_cb</a> from lv_theme_default.o(i.grey_filter_cb) referenced from lv_theme_default.o(i.style_init)
 <LI><a href="#[e0]">grid_update</a> from lv_grid.o(i.grid_update) referenced from lv_grid.o(i.lv_grid_init)
 <LI><a href="#[9e]">home_btn_2_event_handler</a> from events_init.o(i.home_btn_2_event_handler) referenced from events_init.o(i.events_init_home)
 <LI><a href="#[9f]">home_btn_3_event_handler</a> from events_init.o(i.home_btn_3_event_handler) referenced from events_init.o(i.events_init_home)
 <LI><a href="#[113]">home_digital_clock_1_timer</a> from widgets_init.o(i.home_digital_clock_1_timer) referenced from setup_scr_home.o(i.setup_scr_home)
 <LI><a href="#[69]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[115]">kb_event_cb</a> from widgets_init.o(i.kb_event_cb) referenced from gui_guider.o(i.setup_ui)
 <LI><a href="#[db]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(i.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[dc]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(i.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
 <LI><a href="#[df]">kill_oldest_item</a> from lv_draw_sw_gradient.o(i.kill_oldest_item) referenced from lv_draw_sw_gradient.o(i.lv_gradient_get)
 <LI><a href="#[103]">label_event_cb</a> from lv_textarea.o(i.label_event_cb) referenced from lv_textarea.o(i.lv_textarea_constructor)
 <LI><a href="#[fa]">lv_anim_path_ease_in_out</a> from lv_anim.o(i.lv_anim_path_ease_in_out) referenced from lv_spinner.o(i.lv_spinner_constructor)
 <LI><a href="#[ef]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[ef]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from lv_roller.o(i.refr_position)
 <LI><a href="#[be]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_anim.o(i.lv_anim_init)
 <LI><a href="#[be]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_style.o(i.lv_style_transition_dsc_init)
 <LI><a href="#[be]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_theme_default.o(i.style_init)
 <LI><a href="#[bd]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_textarea.o(i.label_event_cb)
 <LI><a href="#[bd]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_textarea.o(i.lv_textarea_add_char)
 <LI><a href="#[bd]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_textarea.o(i.lv_textarea_add_text)
 <LI><a href="#[bd]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_textarea.o(i.lv_textarea_constructor)
 <LI><a href="#[bd]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_textarea.o(i.lv_textarea_event)
 <LI><a href="#[bd]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_textarea.o(i.lv_textarea_set_cursor_pos)
 <LI><a href="#[bd]">lv_anim_path_step</a> from lv_anim.o(i.lv_anim_path_step) referenced from lv_textarea.o(i.lv_textarea_set_text)
 <LI><a href="#[13d]">lv_arc_constructor</a> from lv_arc.o(i.lv_arc_constructor) referenced from lv_arc.o(.constdata)
 <LI><a href="#[13e]">lv_arc_event</a> from lv_arc.o(i.lv_arc_event) referenced from lv_arc.o(.constdata)
 <LI><a href="#[8b]">lv_area_get_height</a> from lv_bar.o(i.lv_area_get_height) referenced from lv_bar.o(i.draw_indic)
 <LI><a href="#[ac]">lv_area_get_height</a> from lv_flex.o(i.lv_area_get_height) referenced from lv_flex.o(i.flex_update)
 <LI><a href="#[8a]">lv_area_get_width</a> from lv_bar.o(i.lv_area_get_width) referenced from lv_bar.o(i.draw_indic)
 <LI><a href="#[ab]">lv_area_get_width</a> from lv_flex.o(i.lv_area_get_width) referenced from lv_flex.o(i.flex_update)
 <LI><a href="#[aa]">lv_area_set_height</a> from lv_area.o(i.lv_area_set_height) referenced from lv_flex.o(i.flex_update)
 <LI><a href="#[a9]">lv_area_set_width</a> from lv_area.o(i.lv_area_set_width) referenced from lv_flex.o(i.flex_update)
 <LI><a href="#[bf]">lv_async_timer_cb</a> from lv_async.o(i.lv_async_timer_cb) referenced from lv_async.o(i.lv_async_call)
 <LI><a href="#[c0]">lv_bar_anim</a> from lv_bar.o(i.lv_bar_anim) referenced from lv_bar.o(i.lv_bar_set_start_value)
 <LI><a href="#[c0]">lv_bar_anim</a> from lv_bar.o(i.lv_bar_anim) referenced from lv_bar.o(i.lv_bar_set_value)
 <LI><a href="#[c1]">lv_bar_anim_ready</a> from lv_bar.o(i.lv_bar_anim_ready) referenced from lv_bar.o(i.lv_bar_set_start_value)
 <LI><a href="#[c1]">lv_bar_anim_ready</a> from lv_bar.o(i.lv_bar_anim_ready) referenced from lv_bar.o(i.lv_bar_set_value)
 <LI><a href="#[13f]">lv_bar_constructor</a> from lv_bar.o(i.lv_bar_constructor) referenced from lv_bar.o(.constdata)
 <LI><a href="#[140]">lv_bar_destructor</a> from lv_bar.o(i.lv_bar_destructor) referenced from lv_bar.o(.constdata)
 <LI><a href="#[141]">lv_bar_event</a> from lv_bar.o(i.lv_bar_event) referenced from lv_bar.o(.constdata)
 <LI><a href="#[142]">lv_btn_constructor</a> from lv_btn.o(i.lv_btn_constructor) referenced from lv_btn.o(.constdata)
 <LI><a href="#[143]">lv_btnmatrix_constructor</a> from lv_btnmatrix.o(i.lv_btnmatrix_constructor) referenced from lv_btnmatrix.o(.constdata)
 <LI><a href="#[144]">lv_btnmatrix_destructor</a> from lv_btnmatrix.o(i.lv_btnmatrix_destructor) referenced from lv_btnmatrix.o(.constdata)
 <LI><a href="#[145]">lv_btnmatrix_event</a> from lv_btnmatrix.o(i.lv_btnmatrix_event) referenced from lv_btnmatrix.o(.constdata)
 <LI><a href="#[11e]">lv_calendar_constructor</a> from lv_calendar.o(i.lv_calendar_constructor) referenced from lv_calendar.o(.constdata)
 <LI><a href="#[121]">lv_chart_constructor</a> from lv_chart.o(i.lv_chart_constructor) referenced from lv_chart.o(.constdata)
 <LI><a href="#[122]">lv_chart_destructor</a> from lv_chart.o(i.lv_chart_destructor) referenced from lv_chart.o(.constdata)
 <LI><a href="#[123]">lv_chart_event</a> from lv_chart.o(i.lv_chart_event) referenced from lv_chart.o(.constdata)
 <LI><a href="#[146]">lv_checkbox_constructor</a> from lv_checkbox.o(i.lv_checkbox_constructor) referenced from lv_checkbox.o(.constdata)
 <LI><a href="#[147]">lv_checkbox_destructor</a> from lv_checkbox.o(i.lv_checkbox_destructor) referenced from lv_checkbox.o(.constdata)
 <LI><a href="#[148]">lv_checkbox_event</a> from lv_checkbox.o(i.lv_checkbox_event) referenced from lv_checkbox.o(.constdata)
 <LI><a href="#[124]">lv_colorwheel_constructor</a> from lv_colorwheel.o(i.lv_colorwheel_constructor) referenced from lv_colorwheel.o(.constdata)
 <LI><a href="#[125]">lv_colorwheel_event</a> from lv_colorwheel.o(i.lv_colorwheel_event) referenced from lv_colorwheel.o(.constdata)
 <LI><a href="#[165]">lv_dclock_constructor</a> from lv_dclock.o(i.lv_dclock_constructor) referenced from lv_dclock.o(.constdata)
 <LI><a href="#[166]">lv_dclock_destructor</a> from lv_dclock.o(i.lv_dclock_destructor) referenced from lv_dclock.o(.constdata)
 <LI><a href="#[167]">lv_dclock_event</a> from lv_dclock.o(i.lv_dclock_event) referenced from lv_dclock.o(.constdata)
 <LI><a href="#[108]">lv_demo_task</a> from lvgl_demo.o(i.lv_demo_task) referenced from lvgl_demo.o(i.lvgl_demo_init)
 <LI><a href="#[c5]">lv_draw_mask_angle</a> from lv_draw_mask.o(i.lv_draw_mask_angle) referenced from lv_draw_mask.o(i.lv_draw_mask_angle_init)
 <LI><a href="#[c6]">lv_draw_mask_line</a> from lv_draw_mask.o(i.lv_draw_mask_line) referenced from lv_draw_mask.o(i.lv_draw_mask_line_points_init)
 <LI><a href="#[c7]">lv_draw_mask_radius</a> from lv_draw_mask.o(i.lv_draw_mask_radius) referenced from lv_draw_mask.o(i.lv_draw_mask_radius_init)
 <LI><a href="#[cb]">lv_draw_sw_arc</a> from lv_draw_sw_arc.o(i.lv_draw_sw_arc) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[cd]">lv_draw_sw_bg</a> from lv_draw_sw_rect.o(i.lv_draw_sw_bg) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d9]">lv_draw_sw_blend_basic</a> from lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d4]">lv_draw_sw_buffer_copy</a> from lv_draw_sw.o(i.lv_draw_sw_buffer_copy) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[cf]">lv_draw_sw_img_decoded</a> from lv_draw_sw_img.o(i.lv_draw_sw_img_decoded) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[c3]">lv_draw_sw_init_ctx</a> from lv_draw_sw.o(i.lv_draw_sw_init_ctx) referenced from lv_hal_disp.o(i.lv_disp_drv_init)
 <LI><a href="#[d6]">lv_draw_sw_layer_adjust</a> from lv_draw_sw_layer.o(i.lv_draw_sw_layer_adjust) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d7]">lv_draw_sw_layer_blend</a> from lv_draw_sw_layer.o(i.lv_draw_sw_layer_blend) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d5]">lv_draw_sw_layer_create</a> from lv_draw_sw_layer.o(i.lv_draw_sw_layer_create) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d8]">lv_draw_sw_layer_destroy</a> from lv_draw_sw_layer.o(i.lv_draw_sw_layer_destroy) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[ce]">lv_draw_sw_letter</a> from lv_draw_sw_letter.o(i.lv_draw_sw_letter) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d0]">lv_draw_sw_line</a> from lv_draw_sw_line.o(i.lv_draw_sw_line) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d1]">lv_draw_sw_polygon</a> from lv_draw_sw_polygon.o(i.lv_draw_sw_polygon) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[cc]">lv_draw_sw_rect</a> from lv_draw_sw_rect.o(i.lv_draw_sw_rect) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d2]">lv_draw_sw_transform</a> from lv_draw_sw_transform.o(i.lv_draw_sw_transform) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[d3]">lv_draw_sw_wait_for_finish</a> from lv_draw_sw.o(i.lv_draw_sw_wait_for_finish) referenced from lv_draw_sw.o(i.lv_draw_sw_init_ctx)
 <LI><a href="#[149]">lv_dropdown_constructor</a> from lv_dropdown.o(i.lv_dropdown_constructor) referenced from lv_dropdown.o(.constdata)
 <LI><a href="#[14a]">lv_dropdown_destructor</a> from lv_dropdown.o(i.lv_dropdown_destructor) referenced from lv_dropdown.o(.constdata)
 <LI><a href="#[14b]">lv_dropdown_event</a> from lv_dropdown.o(i.lv_dropdown_event) referenced from lv_dropdown.o(.constdata)
 <LI><a href="#[14e]">lv_dropdown_list_event</a> from lv_dropdown.o(i.lv_dropdown_list_event) referenced from lv_dropdown.o(.constdata)
 <LI><a href="#[14c]">lv_dropdownlist_constructor</a> from lv_dropdown.o(i.lv_dropdownlist_constructor) referenced from lv_dropdown.o(.constdata)
 <LI><a href="#[14d]">lv_dropdownlist_destructor</a> from lv_dropdown.o(i.lv_dropdownlist_destructor) referenced from lv_dropdown.o(.constdata)
 <LI><a href="#[13c]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt) referenced 6 times from lv_font_montserrat_14.o(.constdata)
 <LI><a href="#[13b]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt) referenced 6 times from lv_font_montserrat_14.o(.constdata)
 <LI><a href="#[14f]">lv_img_constructor</a> from lv_img.o(i.lv_img_constructor) referenced from lv_img.o(.constdata)
 <LI><a href="#[82]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[7f]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[80]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[81]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[150]">lv_img_destructor</a> from lv_img.o(i.lv_img_destructor) referenced from lv_img.o(.constdata)
 <LI><a href="#[151]">lv_img_event</a> from lv_img.o(i.lv_img_event) referenced from lv_img.o(.constdata)
 <LI><a href="#[e5]">lv_indev_read_timer_cb</a> from lv_indev.o(i.lv_indev_read_timer_cb) referenced from lv_hal_indev.o(i.lv_indev_drv_register)
 <LI><a href="#[126]">lv_keyboard_constructor</a> from lv_keyboard.o(i.lv_keyboard_constructor) referenced from lv_keyboard.o(.constdata)
 <LI><a href="#[e6]">lv_keyboard_def_event_cb</a> from lv_keyboard.o(i.lv_keyboard_def_event_cb) referenced from lv_keyboard.o(i.lv_keyboard_constructor)
 <LI><a href="#[152]">lv_label_constructor</a> from lv_label.o(i.lv_label_constructor) referenced from lv_label.o(.constdata)
 <LI><a href="#[153]">lv_label_destructor</a> from lv_label.o(i.lv_label_destructor) referenced from lv_label.o(.constdata)
 <LI><a href="#[154]">lv_label_event</a> from lv_label.o(i.lv_label_event) referenced from lv_label.o(.constdata)
 <LI><a href="#[127]">lv_led_constructor</a> from lv_led.o(i.lv_led_constructor) referenced from lv_led.o(.constdata)
 <LI><a href="#[128]">lv_led_event</a> from lv_led.o(i.lv_led_event) referenced from lv_led.o(.constdata)
 <LI><a href="#[155]">lv_line_constructor</a> from lv_line.o(i.lv_line_constructor) referenced from lv_line.o(.constdata)
 <LI><a href="#[156]">lv_line_event</a> from lv_line.o(i.lv_line_event) referenced from lv_line.o(.constdata)
 <LI><a href="#[e9]">lv_mem_walker</a> from lv_mem.o(i.lv_mem_walker) referenced from lv_mem.o(i.lv_mem_monitor)
 <LI><a href="#[ea]">lv_menu_back_event_cb</a> from lv_menu.o(i.lv_menu_back_event_cb) referenced from lv_menu.o(i.lv_menu_constructor)
 <LI><a href="#[129]">lv_menu_constructor</a> from lv_menu.o(i.lv_menu_constructor) referenced from lv_menu.o(.constdata)
 <LI><a href="#[12d]">lv_menu_cont_constructor</a> from lv_menu.o(i.lv_menu_cont_constructor) referenced from lv_menu.o(.constdata)
 <LI><a href="#[12a]">lv_menu_destructor</a> from lv_menu.o(i.lv_menu_destructor) referenced from lv_menu.o(.constdata)
 <LI><a href="#[12b]">lv_menu_page_constructor</a> from lv_menu.o(i.lv_menu_page_constructor) referenced from lv_menu.o(.constdata)
 <LI><a href="#[12c]">lv_menu_page_destructor</a> from lv_menu.o(i.lv_menu_page_destructor) referenced from lv_menu.o(.constdata)
 <LI><a href="#[12e]">lv_menu_section_constructor</a> from lv_menu.o(i.lv_menu_section_constructor) referenced from lv_menu.o(.constdata)
 <LI><a href="#[eb]">lv_menu_value_changed_event_cb</a> from lv_menu.o(i.lv_menu_value_changed_event_cb) referenced from lv_menu.o(i.lv_menu_constructor)
 <LI><a href="#[12f]">lv_meter_constructor</a> from lv_meter.o(i.lv_meter_constructor) referenced from lv_meter.o(.constdata)
 <LI><a href="#[130]">lv_meter_destructor</a> from lv_meter.o(i.lv_meter_destructor) referenced from lv_meter.o(.constdata)
 <LI><a href="#[131]">lv_meter_event</a> from lv_meter.o(i.lv_meter_event) referenced from lv_meter.o(.constdata)
 <LI><a href="#[11b]">lv_obj_constructor</a> from lv_obj.o(i.lv_obj_constructor) referenced from lv_obj.o(.constdata)
 <LI><a href="#[11c]">lv_obj_destructor</a> from lv_obj.o(i.lv_obj_destructor) referenced from lv_obj.o(.constdata)
 <LI><a href="#[11d]">lv_obj_event</a> from lv_obj.o(i.lv_obj_event) referenced from lv_obj.o(.constdata)
 <LI><a href="#[a8]">lv_obj_get_height</a> from lv_obj_pos.o(i.lv_obj_get_height) referenced from lv_flex.o(i.find_track_end)
 <LI><a href="#[a7]">lv_obj_get_width</a> from lv_obj_pos.o(i.lv_obj_get_width) referenced from lv_flex.o(i.find_track_end)
 <LI><a href="#[157]">lv_roller_constructor</a> from lv_roller.o(i.lv_roller_constructor) referenced from lv_roller.o(.constdata)
 <LI><a href="#[158]">lv_roller_event</a> from lv_roller.o(i.lv_roller_event) referenced from lv_roller.o(.constdata)
 <LI><a href="#[159]">lv_roller_label_event</a> from lv_roller.o(i.lv_roller_label_event) referenced from lv_roller.o(.constdata)
 <LI><a href="#[15a]">lv_slider_constructor</a> from lv_slider.o(i.lv_slider_constructor) referenced from lv_slider.o(.constdata)
 <LI><a href="#[15b]">lv_slider_event</a> from lv_slider.o(i.lv_slider_event) referenced from lv_slider.o(.constdata)
 <LI><a href="#[132]">lv_spinbox_constructor</a> from lv_spinbox.o(i.lv_spinbox_constructor) referenced from lv_spinbox.o(.constdata)
 <LI><a href="#[133]">lv_spinbox_event</a> from lv_spinbox.o(i.lv_spinbox_event) referenced from lv_spinbox.o(.constdata)
 <LI><a href="#[134]">lv_spinner_constructor</a> from lv_spinner.o(i.lv_spinner_constructor) referenced from lv_spinner.o(.constdata)
 <LI><a href="#[fc]">lv_style_set_prop_helper</a> from lv_style.o(i.lv_style_set_prop_helper) referenced from lv_style.o(i.lv_style_set_prop)
 <LI><a href="#[fd]">lv_switch_anim_exec_cb</a> from lv_switch.o(i.lv_switch_anim_exec_cb) referenced from lv_switch.o(i.lv_switch_event)
 <LI><a href="#[fe]">lv_switch_anim_ready</a> from lv_switch.o(i.lv_switch_anim_ready) referenced from lv_switch.o(i.lv_switch_event)
 <LI><a href="#[15c]">lv_switch_constructor</a> from lv_switch.o(i.lv_switch_constructor) referenced from lv_switch.o(.constdata)
 <LI><a href="#[15d]">lv_switch_destructor</a> from lv_switch.o(i.lv_switch_destructor) referenced from lv_switch.o(.constdata)
 <LI><a href="#[15e]">lv_switch_event</a> from lv_switch.o(i.lv_switch_event) referenced from lv_switch.o(.constdata)
 <LI><a href="#[15f]">lv_table_constructor</a> from lv_table.o(i.lv_table_constructor) referenced from lv_table.o(.constdata)
 <LI><a href="#[160]">lv_table_destructor</a> from lv_table.o(i.lv_table_destructor) referenced from lv_table.o(.constdata)
 <LI><a href="#[161]">lv_table_event</a> from lv_table.o(i.lv_table_event) referenced from lv_table.o(.constdata)
 <LI><a href="#[135]">lv_tabview_constructor</a> from lv_tabview.o(i.lv_tabview_constructor) referenced from lv_tabview.o(.constdata)
 <LI><a href="#[136]">lv_tabview_destructor</a> from lv_tabview.o(i.lv_tabview_destructor) referenced from lv_tabview.o(.constdata)
 <LI><a href="#[137]">lv_tabview_event</a> from lv_tabview.o(i.lv_tabview_event) referenced from lv_tabview.o(.constdata)
 <LI><a href="#[162]">lv_textarea_constructor</a> from lv_textarea.o(i.lv_textarea_constructor) referenced from lv_textarea.o(.constdata)
 <LI><a href="#[163]">lv_textarea_destructor</a> from lv_textarea.o(i.lv_textarea_destructor) referenced from lv_textarea.o(.constdata)
 <LI><a href="#[164]">lv_textarea_event</a> from lv_textarea.o(i.lv_textarea_event) referenced from lv_textarea.o(.constdata)
 <LI><a href="#[138]">lv_tileview_constructor</a> from lv_tileview.o(i.lv_tileview_constructor) referenced from lv_tileview.o(.constdata)
 <LI><a href="#[139]">lv_tileview_tile_constructor</a> from lv_tileview.o(i.lv_tileview_tile_constructor) referenced from lv_tileview.o(.constdata)
 <LI><a href="#[6]">lv_txt_unicode_to_utf8</a> from lv_txt.o(i.lv_txt_unicode_to_utf8) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[5]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(i.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[7]">lv_txt_utf8_get_char_id</a> from lv_txt.o(i.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[2]">lv_txt_utf8_get_length</a> from lv_txt.o(i.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[4]">lv_txt_utf8_next</a> from lv_txt.o(i.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1]">lv_txt_utf8_prev</a> from lv_txt.o(i.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[3]">lv_txt_utf8_size</a> from lv_txt.o(i.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[13a]">lv_win_constructor</a> from lv_win.o(i.lv_win_constructor) referenced from lv_win.o(.constdata)
 <LI><a href="#[63]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[10b]">month_event_cb</a> from lv_calendar_header_arrow.o(i.month_event_cb) referenced 2 times from lv_calendar_header_arrow.o(i.my_constructor)
 <LI><a href="#[f1]">mouse_read</a> from lv_port_indev.o(i.mouse_read) referenced from lv_port_indev.o(i.lv_port_indev_init)
 <LI><a href="#[107]">music_task</a> from lvgl_demo.o(i.music_task) referenced from lvgl_demo.o(i.lvgl_demo_init)
 <LI><a href="#[11f]">my_constructor</a> from lv_calendar_header_arrow.o(i.my_constructor) referenced 2 times from lv_calendar_header_arrow.o(.constdata)
 <LI><a href="#[f7]">opa_scale_anim</a> from lv_disp.o(i.opa_scale_anim) referenced from lv_disp.o(i.lv_scr_load_anim)
 <LI><a href="#[a0]">pause_event_handler</a> from events_init.o(i.pause_event_handler) referenced from events_init.o(i.events_init_pause)
 <LI><a href="#[119]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[110]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[101]">pwd_char_hider_anim</a> from lv_textarea.o(i.pwd_char_hider_anim) referenced from lv_textarea.o(i.lv_textarea_add_char)
 <LI><a href="#[101]">pwd_char_hider_anim</a> from lv_textarea.o(i.pwd_char_hider_anim) referenced from lv_textarea.o(i.lv_textarea_add_text)
 <LI><a href="#[101]">pwd_char_hider_anim</a> from lv_textarea.o(i.pwd_char_hider_anim) referenced from lv_textarea.o(i.lv_textarea_set_text)
 <LI><a href="#[102]">pwd_char_hider_anim_ready</a> from lv_textarea.o(i.pwd_char_hider_anim_ready) referenced from lv_textarea.o(i.lv_textarea_add_char)
 <LI><a href="#[102]">pwd_char_hider_anim_ready</a> from lv_textarea.o(i.pwd_char_hider_anim_ready) referenced from lv_textarea.o(i.lv_textarea_add_text)
 <LI><a href="#[102]">pwd_char_hider_anim_ready</a> from lv_textarea.o(i.pwd_char_hider_anim_ready) referenced from lv_textarea.o(i.lv_textarea_set_text)
 <LI><a href="#[f4]">scr_anim_ready</a> from lv_disp.o(i.scr_anim_ready) referenced from lv_disp.o(i.lv_scr_load_anim)
 <LI><a href="#[f3]">scr_load_anim_start</a> from lv_disp.o(i.scr_load_anim_start) referenced from lv_disp.o(i.lv_scr_load_anim)
 <LI><a href="#[112]">screen1_async_cb</a> from events_init.o(i.screen1_async_cb) referenced from events_init.o(i.screen_1_ta_1_event_handler)
 <LI><a href="#[a1]">screen_1_event_handler</a> from events_init.o(i.screen_1_event_handler) referenced from events_init.o(i.events_init_screen_1)
 <LI><a href="#[a2]">screen_1_ta_1_event_handler</a> from events_init.o(i.screen_1_ta_1_event_handler) referenced from events_init.o(i.events_init_screen_1)
 <LI><a href="#[ee]">scroll_anim_ready_cb</a> from lv_obj_scroll.o(i.scroll_anim_ready_cb) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[111]">scroll_anim_ready_cb</a> from lv_roller.o(i.scroll_anim_ready_cb) referenced from lv_roller.o(i.refr_position)
 <LI><a href="#[ec]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.lv_obj_get_scroll_end)
 <LI><a href="#[ec]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[ec]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_to)
 <LI><a href="#[ec]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_to_x)
 <LI><a href="#[ec]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.scroll_area_into_view)
 <LI><a href="#[ed]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.lv_obj_get_scroll_end)
 <LI><a href="#[ed]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[ed]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_to)
 <LI><a href="#[ed]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_to_y)
 <LI><a href="#[ed]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.scroll_area_into_view)
 <LI><a href="#[e7]">set_ofs_x_anim</a> from lv_label.o(i.set_ofs_x_anim) referenced from lv_label.o(i.lv_label_constructor)
 <LI><a href="#[e7]">set_ofs_x_anim</a> from lv_label.o(i.set_ofs_x_anim) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[e7]">set_ofs_x_anim</a> from lv_label.o(i.set_ofs_x_anim) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[e8]">set_ofs_y_anim</a> from lv_label.o(i.set_ofs_y_anim) referenced from lv_label.o(i.lv_label_constructor)
 <LI><a href="#[e8]">set_ofs_y_anim</a> from lv_label.o(i.set_ofs_y_anim) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[e8]">set_ofs_y_anim</a> from lv_label.o(i.set_ofs_y_anim) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[f5]">set_x_anim</a> from lv_disp.o(i.set_x_anim) referenced from lv_disp.o(i.lv_scr_load_anim)
 <LI><a href="#[f2]">set_y_anim</a> from lv_roller.o(i.set_y_anim) referenced from lv_roller.o(i.lv_roller_event)
 <LI><a href="#[f6]">set_y_anim</a> from lv_disp.o(i.set_y_anim) referenced from lv_disp.o(i.lv_scr_load_anim)
 <LI><a href="#[f2]">set_y_anim</a> from lv_roller.o(i.set_y_anim) referenced from lv_roller.o(i.refr_position)
 <LI><a href="#[a3]">settings_btn_1_event_handler</a> from events_init.o(i.settings_btn_1_event_handler) referenced from events_init.o(i.events_init_settings)
 <LI><a href="#[a6]">settings_btn_2_event_handler</a> from events_init.o(i.settings_btn_2_event_handler) referenced from events_init.o(i.events_init_settings)
 <LI><a href="#[a5]">settings_btn_3_event_handler</a> from events_init.o(i.settings_btn_3_event_handler) referenced from events_init.o(i.events_init_settings)
 <LI><a href="#[a4]">settings_btn_4_event_handler</a> from events_init.o(i.settings_btn_4_event_handler) referenced from events_init.o(i.events_init_settings)
 <LI><a href="#[ba]">setup_scr_character</a> from setup_scr_character.o(i.setup_scr_character) referenced from events_init.o(i.home_btn_2_event_handler)
 <LI><a href="#[ad]">setup_scr_end</a> from setup_scr_end.o(i.setup_scr_end) referenced from events_init.o(i.game1_async_cb)
 <LI><a href="#[ad]">setup_scr_end</a> from setup_scr_end.o(i.setup_scr_end) referenced from events_init.o(i.game2_async_cb)
 <LI><a href="#[ad]">setup_scr_end</a> from setup_scr_end.o(i.setup_scr_end) referenced from events_init.o(i.game3_async_cb)
 <LI><a href="#[ad]">setup_scr_end</a> from setup_scr_end.o(i.setup_scr_end) referenced from events_init.o(i.game4_async_cb)
 <LI><a href="#[ad]">setup_scr_end</a> from setup_scr_end.o(i.setup_scr_end) referenced from events_init.o(i.game5_async_cb)
 <LI><a href="#[88]">setup_scr_game</a> from setup_scr_game.o(i.setup_scr_game) referenced from events_init.o(i.character_btn_1_event_handler)
 <LI><a href="#[b4]">setup_scr_game1</a> from setup_scr_game1.o(i.setup_scr_game1) referenced from events_init.o(i.game_btn_2_event_handler)
 <LI><a href="#[b4]">setup_scr_game1</a> from setup_scr_game1.o(i.setup_scr_game1) referenced from events_init.o(i.pause_event_handler)
 <LI><a href="#[b5]">setup_scr_game2</a> from setup_scr_game2.o(i.setup_scr_game2) referenced from events_init.o(i.game_btn_3_event_handler)
 <LI><a href="#[b6]">setup_scr_game3</a> from setup_scr_game3.o(i.setup_scr_game3) referenced from events_init.o(i.game_btn_4_event_handler)
 <LI><a href="#[b7]">setup_scr_game4</a> from setup_scr_game4.o(i.setup_scr_game4) referenced from events_init.o(i.game_btn_5_event_handler)
 <LI><a href="#[b8]">setup_scr_game5</a> from setup_scr_game5.o(i.setup_scr_game5) referenced from events_init.o(i.game_btn_6_event_handler)
 <LI><a href="#[89]">setup_scr_home</a> from setup_scr_home.o(i.setup_scr_home) referenced from events_init.o(i.character_btn_3_event_handler)
 <LI><a href="#[89]">setup_scr_home</a> from setup_scr_home.o(i.setup_scr_home) referenced from events_init.o(i.end_btn_2_event_handler)
 <LI><a href="#[89]">setup_scr_home</a> from setup_scr_home.o(i.setup_scr_home) referenced from events_init.o(i.game_btn_1_event_handler)
 <LI><a href="#[89]">setup_scr_home</a> from setup_scr_home.o(i.setup_scr_home) referenced from events_init.o(i.game_event_handler)
 <LI><a href="#[89]">setup_scr_home</a> from setup_scr_home.o(i.setup_scr_home) referenced from events_init.o(i.screen1_async_cb)
 <LI><a href="#[89]">setup_scr_home</a> from setup_scr_home.o(i.setup_scr_home) referenced from events_init.o(i.settings_btn_1_event_handler)
 <LI><a href="#[ae]">setup_scr_pause</a> from setup_scr_pause.o(i.setup_scr_pause) referenced from events_init.o(i.game1_event_handler)
 <LI><a href="#[bb]">setup_scr_settings</a> from setup_scr_settings.o(i.setup_scr_settings) referenced from events_init.o(i.home_btn_3_event_handler)
 <LI><a href="#[114]">ta_event_cb</a> from widgets_init.o(i.ta_event_cb) referenced from setup_scr_screen_1.o(i.setup_scr_screen_1)
 <LI><a href="#[118]">tank_move_timer_cb</a> from lvgl_demo.o(i.tank_move_timer_cb) referenced from lvgl_demo.o(i.tank_init)
 <LI><a href="#[104]">theme_apply</a> from lv_theme_default.o(i.theme_apply) referenced from lv_theme_default.o(i.lv_theme_default_init)
 <LI><a href="#[105]">tileview_event_cb</a> from lv_tileview.o(i.tileview_event_cb) referenced from lv_tileview.o(i.lv_tileview_constructor)
 <LI><a href="#[83]">trans_anim_cb</a> from lv_obj_style.o(i.trans_anim_cb) referenced from lv_obj_style.o(i._lv_obj_style_create_transition)
 <LI><a href="#[85]">trans_anim_ready_cb</a> from lv_obj_style.o(i.trans_anim_ready_cb) referenced from lv_obj_style.o(i._lv_obj_style_create_transition)
 <LI><a href="#[84]">trans_anim_start_cb</a> from lv_obj_style.o(i.trans_anim_start_cb) referenced from lv_obj_style.o(i._lv_obj_style_create_transition)
 <LI><a href="#[b9]">unicode_list_compare</a> from lv_font_fmt_txt.o(i.unicode_list_compare) referenced from lv_font_fmt_txt.o(i.get_glyph_dsc_id)
 <LI><a href="#[10c]">value_changed_event_cb</a> from lv_calendar_header_arrow.o(i.value_changed_event_cb) referenced 2 times from lv_calendar_header_arrow.o(i.my_constructor)
 <LI><a href="#[10a]">w25qxx_task</a> from lvgl_demo.o(i.w25qxx_task) referenced from lvgl_demo.o(i.lvgl_demo_init)
 <LI><a href="#[10d]">year_event_cb</a> from lv_calendar_header_dropdown.o(i.year_event_cb) referenced from lv_calendar_header_dropdown.o(i.my_constructor)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[53b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[16d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[18a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[53c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[53d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[53e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[53f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[540]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[533]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[532]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52b]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[541]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[524]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[542]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[545]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[546]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHalfBufferLoop
</UL>

<P><STRONG><a name="[548]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[20e]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[210]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected_str
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_bullet
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_2_event_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
</UL>

<P><STRONG><a name="[2f5]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_read
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_1_ta_1_event_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_count_12
</UL>

<P><STRONG><a name="[24e]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>

<P><STRONG><a name="[406]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_bullet
</UL>

<P><STRONG><a name="[20d]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[20f]"></a>strpbrk</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, strpbrk.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strpbrk
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[176]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[178]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_vs_rect
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_polygon
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tank_corners
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_vs_rect
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tank_corners
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_vs_rect
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_polygon
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tank_corners
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_polygon
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tank_corners
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[2e3]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
</UL>

<P><STRONG><a name="[54a]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_vs_rect
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
</UL>

<P><STRONG><a name="[269]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_vs_rect
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_polygon
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
</UL>

<P><STRONG><a name="[54b]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2cf]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[54c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[54d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[54e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[177]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[66]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[54f]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[550]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[187]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[17d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[17c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[188]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[551]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[186]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[18c]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[18b]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[552]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>BSP_SD_AbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_AbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>

<P><STRONG><a name="[190]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[192]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[194]"></a>BSP_SD_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[195]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, bsp_driver_sd.o(i.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[198]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[19a]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sd_diskio.o(i.BSP_SD_ReadCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[19c]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[19e]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sd_diskio.o(i.BSP_SD_WriteCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA2_Stream6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream6_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2S2_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[223]"></a>FATFS_LinkDriver</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
</UL>

<P><STRONG><a name="[220]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_ADC_ConvCpltCallback</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lvgl_demo.o(i.HAL_ADC_ConvCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_ADC_ConvCpltCallback &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[18f]"></a>HAL_ADC_ConvHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ConvHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAHalfConvCplt
</UL>

<P><STRONG><a name="[18d]"></a>HAL_ADC_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAError
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMAConvCplt
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_ADC_Init</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_ADC_Start_DMA</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_DMA_Abort</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1db]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[238]"></a>HAL_DMA_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[21b]"></a>HAL_DMA_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillBlock
</UL>

<P><STRONG><a name="[19f]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream6_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_DMA_Init</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Transmit_DMA
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_Delay</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 494 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[21a]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDirection
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillBlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[6e]"></a>HAL_I2SEx_FullDuplex_IRQHandler</STRONG> (Thumb, 706 bytes, Stack size 40 bytes, stm32f4xx_hal_i2s_ex.o(i.HAL_I2SEx_FullDuplex_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2SEx_FullDuplex_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_TxRxCpltCallback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
</UL>
<P><STRONG><a name="[1ae]"></a>HAL_I2SEx_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s_ex.o(i.HAL_I2SEx_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_FullDuplex_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>HAL_I2S_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMAError
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2SEx_FullDuplex_IRQHandler
</UL>

<P><STRONG><a name="[23d]"></a>HAL_I2S_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_I2S_Init</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2S_Init &rArr; HAL_I2S_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2S2_Init
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_I2S_MspInit</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, i2s.o(i.HAL_I2S_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_I2S_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[217]"></a>HAL_I2S_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_I2S_Transmit_DMA</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f4xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_I2S_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_I2S_TxCpltCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, music.o(i.HAL_I2S_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2S_TxCpltCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMATxCplt
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_I2S_TxHalfCpltCallback</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, music.o(i.HAL_I2S_TxHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_I2S_TxHalfCpltCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_DMATxHalfCplt
</UL>

<P><STRONG><a name="[203]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_InitTick</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, stm32f4xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_MspInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1b4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 336 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_MspInit
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1be]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[244]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 990 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1c7]"></a>HAL_RNG_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prim_maze
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_RNG_IRQHandler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_ReadyDataCallback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH_RNG_IRQHandler
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_RNG_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rng.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RNG_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_RNG_ReadyDataCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_rng.o(i.HAL_RNG_ReadyDataCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_SD_AbortCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.HAL_SD_AbortCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_AbortCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
</UL>

<P><STRONG><a name="[197]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[1e6]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[191]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[193]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[1d4]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 700 bytes, Stack size 32 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteFIFO
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[196]"></a>HAL_SD_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_SD_InitCard</STRONG> (Thumb, 504 bytes, Stack size 104 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_InitCard &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_PowerState_ON
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_SD_MspInit</STRONG> (Thumb, 308 bytes, Stack size 64 bytes, sdio.o(i.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 300 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bsp_driver_sd.o(i.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[19d]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 290 bytes, Stack size 56 bytes, stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[1ee]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAError
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
</UL>

<P><STRONG><a name="[1ed]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_SPI_Init</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1f0]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[1f1]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDirection
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[1f3]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 562 bytes, Stack size 56 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>

<P><STRONG><a name="[1f4]"></a>HAL_SPI_Transmit_DMA</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_SPI_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillBlock
</UL>

<P><STRONG><a name="[23f]"></a>HAL_SPI_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[23e]"></a>HAL_SPI_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAHalfTransmitCplt
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[200]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[22f]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[22d]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1f5]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2fe]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[2ff]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[22c]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 366 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[1f7]"></a>HAL_TIM_Encoder_Init</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_MspInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
</UL>

<P><STRONG><a name="[1f8]"></a>HAL_TIM_Encoder_MspInit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, tim.o(i.HAL_TIM_Encoder_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
</UL>

<P><STRONG><a name="[4fb]"></a>HAL_TIM_Encoder_Start</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Encoder_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Encoder_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1fa]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1f9]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[22e]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 580 bytes, Stack size 20 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[201]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[202]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[1ff]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[207]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[206]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[204]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 790 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[209]"></a>HAL_UART_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[20a]"></a>HAL_UART_MspInit</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[212]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[20c]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 416 bytes, Stack size 48 bytes, uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_RTOSISR
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strpbrk
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[214]"></a>HAL_UART_Transmit</STRONG> (Thumb, 338 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_2_event_handler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
</UL>

<P><STRONG><a name="[208]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[61]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HASH_RNG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HASH_RNG_IRQHandler &rArr; HAL_RNG_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[218]"></a>LCD_FillBlock</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ili9341.o(i.LCD_FillBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LCD_FillBlock &rArr; LCD_SetWindow &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[21c]"></a>LCD_Init</STRONG> (Thumb, 4606 bytes, Stack size 48 bytes, ili9341.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LCD_Init &rArr; LCD_SetWindow &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetDirection
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[21e]"></a>LCD_SetDirection</STRONG> (Thumb, 500 bytes, Stack size 16 bytes, ili9341.o(i.LCD_SetDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_SetDirection &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[219]"></a>LCD_SetWindow</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, ili9341.o(i.LCD_SetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LCD_SetWindow &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillBlock
</UL>

<P><STRONG><a name="[21f]"></a>MX_ADC1_Init</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[221]"></a>MX_DMA_Init</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, dma.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[222]"></a>MX_FATFS_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fatfs.o(i.MX_FATFS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_FATFS_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[224]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[226]"></a>MX_GPIO_Init</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[227]"></a>MX_I2S2_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2s.o(i.MX_I2S2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_I2S2_Init &rArr; HAL_I2S_Init &rArr; HAL_I2S_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[228]"></a>MX_RNG_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rng.o(i.MX_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4fa]"></a>MX_SDIO_SD_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdio.o(i.MX_SDIO_SD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[229]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22a]"></a>MX_SPI3_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>MX_TIM1_Init</STRONG> (Thumb, 276 bytes, Stack size 128 bytes, tim.o(i.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_TIM1_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[230]"></a>MX_TIM4_Init</STRONG> (Thumb, 94 bytes, Stack size 56 bytes, tim.o(i.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Encoder_Init &rArr; HAL_TIM_Encoder_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[231]"></a>MX_TIM6_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tim.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[232]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[233]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[234]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[235]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e8]"></a>SDIO_ConfigData</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ConfigData))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1e2]"></a>SDIO_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1cd]"></a>SDIO_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SDIO_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SDIO_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d1]"></a>SDIO_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1de]"></a>SDIO_PowerState_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1d5]"></a>SDIO_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1da]"></a>SDIO_WriteFIFO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDIO_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppCommand))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1e1]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdAppOperCommand))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1d2]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1d0]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdBusWidth))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[1df]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdGoIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1e0]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdOperCond))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SDMMC_CmdOperCond
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1e9]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1ea]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[1e7]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSelDesel))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1e3]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCID))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1e5]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendCSD))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[237]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendSCR))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1d3]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>

<P><STRONG><a name="[1e4]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdSetRelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_CmdSetRelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[1d6]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdStopTransfer))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMATxAbort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMARxAbort
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAReceiveCplt
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DMAError
</UL>

<P><STRONG><a name="[1eb]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[1ec]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[236]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 314 bytes, Stack size 0 bytes, stm32f4xx_ll_sdmmc.o(i.SDMMC_GetCmdResp1))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
</UL>

<P><STRONG><a name="[168]"></a>SD_initialize</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_initialize &rArr; BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>SD_ioctl</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SD_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>SD_read</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_read &rArr; osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>SD_status</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SD_status &rArr; BSP_SD_GetCardState &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>SD_write</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_write &rArr; osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SPI2_IRQHandler))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI3_IRQHandler &rArr; HAL_SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>StartDefaultTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = StartDefaultTask &rArr; vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[243]"></a>SystemClock_Config</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f6]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART6_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[245]"></a>W25QXX_Init</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, w25qxx.o(i.W25QXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = W25QXX_Init &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_demo_init
</UL>

<P><STRONG><a name="[246]"></a>W25QXX_RTOS</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_RTOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = W25QXX_RTOS &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_4_event_handler
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
</UL>

<P><STRONG><a name="[211]"></a>W25QXX_RTOSISR</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, w25qxx.o(i.W25QXX_RTOSISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = W25QXX_RTOSISR &rArr; xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[248]"></a>W25QXX_Read</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_Read &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_task
</UL>

<P><STRONG><a name="[249]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, w25qxx.o(i.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = W25QXX_Wait_Busy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
</UL>

<P><STRONG><a name="[24a]"></a>W25QXX_Write</STRONG> (Thumb, 968 bytes, Stack size 104 bytes, w25qxx.o(i.W25QXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = W25QXX_Write &rArr; W25QXX_Wait_Busy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_task
</UL>

<P><STRONG><a name="[24b]"></a>WAV_PlayFile</STRONG> (Thumb, 448 bytes, Stack size 64 bytes, music.o(i.WAV_PlayFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = WAV_PlayFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_Transmit_DMA
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHalfBufferLoop
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_task
</UL>

<P><STRONG><a name="[501]"></a>WAV_SetVolume</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, music.o(i.WAV_SetVolume))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_task
</UL>

<P><STRONG><a name="[24f]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[554]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[216]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_bullet_hit_tank
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[555]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[556]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[251]"></a>__0snprintf</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[557]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[521]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
</UL>

<P><STRONG><a name="[558]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[559]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[252]"></a>__0vprintf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[55a]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[55b]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[55c]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[2b9]"></a>vprintf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>

<P><STRONG><a name="[500]"></a>__ARM_common_memclr4_10</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_port_indev.o(i.__ARM_common_memclr4_10))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_read
</UL>

<P><STRONG><a name="[270]"></a>__ARM_common_memcpy4_8</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.__ARM_common_memcpy4_8))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_diff
</UL>

<P><STRONG><a name="[266]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[261]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[253]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tank_corners
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
</UL>

<P><STRONG><a name="[25a]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
</UL>

<P><STRONG><a name="[25e]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
</UL>

<P><STRONG><a name="[25f]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tank_corners
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
</UL>

<P><STRONG><a name="[260]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
</UL>

<P><STRONG><a name="[263]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_polygon
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
</UL>

<P><STRONG><a name="[257]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[259]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[265]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[258]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[256]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[255]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[267]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[25d]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[25c]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[262]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[25b]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[55d]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[55e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[55f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[254]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[26a]"></a>_lv_anim_core_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_anim.o(i._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[26f]"></a>_lv_area_diff</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, lv_area.o(i._lv_area_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _lv_area_diff
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy4_8
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[2b7]"></a>_lv_area_intersect</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lv_area.o(i._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[271]"></a>_lv_area_is_in</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[278]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(i._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[273]"></a>_lv_area_is_out</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_is_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_area_is_out &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
</UL>

<P><STRONG><a name="[272]"></a>_lv_area_is_point_on</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, lv_area.o(i._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[279]"></a>_lv_area_join</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, lv_area.o(i._lv_area_join))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[c4]"></a>_lv_disp_refr_timer</STRONG> (Thumb, 2076 bytes, Stack size 96 bytes, lv_refr.o(i._lv_disp_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = _lv_disp_refr_timer &rArr; refr_area_part &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_get_idle
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_diff
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[289]"></a>_lv_draw_mask_cleanup</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_draw_mask.o(i._lv_draw_mask_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _lv_draw_mask_cleanup &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[46c]"></a>_lv_event_mark_deleted</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_event.o(i._lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[288]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i._lv_font_clean_up_fmt_txt))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[299]"></a>_lv_fs_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_fs.o(i._lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[29a]"></a>_lv_group_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[29b]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 346 bytes, Stack size 40 bytes, lv_img_buf.o(i._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_img_buf_get_transformed_area &rArr; lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[29d]"></a>_lv_img_cache_open</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lv_img_cache.o(i._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[29f]"></a>_lv_img_decoder_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_img_decoder.o(i._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _lv_img_decoder_init &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2a1]"></a>_lv_indev_read</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_hal_indev.o(i._lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_indev_read &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[2a2]"></a>_lv_indev_scroll_handler</STRONG> (Thumb, 1456 bytes, Stack size 72 bytes, lv_indev_scroll.o(i._lv_indev_scroll_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = _lv_indev_scroll_handler &rArr; _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[2b3]"></a>_lv_indev_scroll_throw_handler</STRONG> (Thumb, 684 bytes, Stack size 48 bytes, lv_indev_scroll.o(i._lv_indev_scroll_throw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[2b5]"></a>_lv_inv_area</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, lv_refr.o(i._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _lv_inv_area &rArr; lv_disp_is_invalidation_enabled &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[280]"></a>_lv_ll_clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_destructor
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_destructor
</UL>

<P><STRONG><a name="[e4]"></a>_lv_ll_get_head</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
<LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[3c2]"></a>_lv_ll_get_len</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_len))
<BR><BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[e3]"></a>_lv_ll_get_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
<LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[e1]"></a>_lv_ll_get_prev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_focus_prev)
<LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
</UL>
<P><STRONG><a name="[e2]"></a>_lv_ll_get_tail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_group.o(i.lv_group_focus_prev)
<LI> lv_group.o(i.lv_group_remove_obj)
<LI> lv_group.o(i.lv_group_add_obj)
</UL>
<P><STRONG><a name="[26b]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_constructor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[2a0]"></a>_lv_ll_ins_head</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_ll.o(i._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
</UL>

<P><STRONG><a name="[27d]"></a>_lv_ll_ins_prev</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _lv_ll_ins_prev &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[284]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_ll.o(i._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[27b]"></a>_lv_ll_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[27e]"></a>_lv_ll_remove</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_remove))
<BR><BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
</UL>

<P><STRONG><a name="[277]"></a>_lv_log_add</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, lv_log.o(i._lv_log_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_enable_invalidation
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_anim_start
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_transform
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_calculate
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_x_start_point
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_check
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_walker
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected_str
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_bullet
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
</UL>

<P><STRONG><a name="[505]"></a>_lv_obj_destruct</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_obj_class.o(i._lv_obj_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_obj_destruct
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[462]"></a>_lv_obj_get_ext_draw_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_draw.o(i._lv_obj_get_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[4a9]"></a>_lv_obj_get_layer_type</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_draw.o(i._lv_obj_get_layer_type))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>

<P><STRONG><a name="[2b2]"></a>_lv_obj_scroll_by_raw</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj_scroll.o(i._lv_obj_scroll_by_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _lv_obj_scroll_by_raw &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[2bd]"></a>_lv_obj_style_apply_color_filter</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, lv_obj_style.o(i._lv_obj_style_apply_color_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[2be]"></a>_lv_obj_style_create_transition</STRONG> (Thumb, 312 bytes, Stack size 112 bytes, lv_obj_style.o(i._lv_obj_style_create_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[2c3]"></a>_lv_obj_style_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_style.o(i._lv_obj_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2c4]"></a>_lv_obj_style_state_compare</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, lv_obj_style.o(i._lv_obj_style_state_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _lv_obj_style_state_compare &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[3e9]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_adjust
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[42f]"></a>_lv_refr_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[477]"></a>_lv_style_get_prop_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(i._lv_style_get_prop_group))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[476]"></a>_lv_style_prop_lookup_flags</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_style.o(i._lv_style_prop_lookup_flags))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[2c6]"></a>_lv_timer_core_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(i._lv_timer_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_timer_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[2c7]"></a>_lv_txt_cut</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lv_txt.o(i._lv_txt_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_txt_cut
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
</UL>

<P><STRONG><a name="[3e7]"></a>_lv_txt_encoded_letter_next_2</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lv_txt.o(i._lv_txt_encoded_letter_next_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[2c8]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 646 bytes, Stack size 136 bytes, lv_txt.o(i._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[2ca]"></a>_lv_txt_ins</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lv_txt.o(i._lv_txt_ins))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_txt_ins
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
</UL>

<P><STRONG><a name="[43f]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lv_txt.o(i._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[2cb]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, lv_txt.o(i._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
</UL>

<P><STRONG><a name="[375]"></a>_lv_utils_bsearch</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, lv_utils.o(i._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[109]"></a>adc_task</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, lvgl_demo.o(i.adc_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adc_task &rArr; vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start_DMA
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_demo.o(i.lvgl_demo_init)
</UL>
<P><STRONG><a name="[2e2]"></a>bullet_create_ex</STRONG> (Thumb, 394 bytes, Stack size 80 bytes, lvgl_demo.o(i.bullet_create_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = bullet_create_ex &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
</UL>

<P><STRONG><a name="[2e9]"></a>bullet_system_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lvgl_demo.o(i.bullet_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bullet_system_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[2f4]"></a>clock_count_12</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_dclock.o(i.clock_count_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = clock_count_12 &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_digital_clock_1_timer
</UL>

<P><STRONG><a name="[21d]"></a>delay_ms</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[368]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[303]"></a>disk_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[367]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[307]"></a>disk_write</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[321]"></a>draw_border_generic</STRONG> (Thumb, 1522 bytes, Stack size 216 bytes, lv_draw_sw_rect.o(i.draw_border_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
</UL>

<P><STRONG><a name="[3d2]"></a>events_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, events_init.o(i.events_init))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
</UL>

<P><STRONG><a name="[348]"></a>events_init_character</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, events_init.o(i.events_init_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = events_init_character &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[34a]"></a>events_init_end</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, events_init.o(i.events_init_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = events_init_end &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
</UL>

<P><STRONG><a name="[34b]"></a>events_init_game</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, events_init.o(i.events_init_game))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = events_init_game &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
</UL>

<P><STRONG><a name="[34c]"></a>events_init_game1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events_init.o(i.events_init_game1))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = events_init_game1 &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[34d]"></a>events_init_game2</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events_init.o(i.events_init_game2))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = events_init_game2 &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
</UL>

<P><STRONG><a name="[34e]"></a>events_init_game3</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events_init.o(i.events_init_game3))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = events_init_game3 &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
</UL>

<P><STRONG><a name="[34f]"></a>events_init_game4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events_init.o(i.events_init_game4))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = events_init_game4 &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
</UL>

<P><STRONG><a name="[350]"></a>events_init_game5</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events_init.o(i.events_init_game5))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = events_init_game5 &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
</UL>

<P><STRONG><a name="[351]"></a>events_init_home</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, events_init.o(i.events_init_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = events_init_home &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
</UL>

<P><STRONG><a name="[352]"></a>events_init_pause</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, events_init.o(i.events_init_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = events_init_pause &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
</UL>

<P><STRONG><a name="[353]"></a>events_init_screen_1</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, events_init.o(i.events_init_screen_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = events_init_screen_1 &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[354]"></a>events_init_settings</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, events_init.o(i.events_init_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = events_init_settings &rArr; lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
</UL>

<P><STRONG><a name="[1a2]"></a>f_lseek</STRONG> (Thumb, 850 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = f_lseek &rArr; validate &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHalfBufferLoop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>

<P><STRONG><a name="[24c]"></a>f_mount</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_mount &rArr; find_volume &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>

<P><STRONG><a name="[24d]"></a>f_open</STRONG> (Thumb, 902 bytes, Stack size 616 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>

<P><STRONG><a name="[1a1]"></a>f_read</STRONG> (Thumb, 542 bytes, Stack size 48 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_read &rArr; validate &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHalfBufferLoop
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>

<P><STRONG><a name="[264]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[36e]"></a>ff_convert</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, ccsbcs.o(i.ff_convert))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[358]"></a>ff_cre_syncobj</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, syscall.o(i.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ff_cre_syncobj &rArr; osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[357]"></a>ff_del_syncobj</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, syscall.o(i.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ff_del_syncobj &rArr; osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[356]"></a>ff_rel_grant</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall.o(i.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>

<P><STRONG><a name="[360]"></a>ff_req_grant</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, syscall.o(i.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[304]"></a>ff_wtoupper</STRONG> (Thumb, 138 bytes, Stack size 4 bytes, ccsbcs.o(i.ff_wtoupper))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[7c]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(i.fputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vprintf)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[af]"></a>game1_async_cb</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, events_init.o(i.game1_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = game1_async_cb &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game1_event_handler)
</UL>
<P><STRONG><a name="[b0]"></a>game2_async_cb</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, events_init.o(i.game2_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = game2_async_cb &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game2_event_handler)
</UL>
<P><STRONG><a name="[b1]"></a>game3_async_cb</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, events_init.o(i.game3_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = game3_async_cb &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game3_event_handler)
</UL>
<P><STRONG><a name="[b2]"></a>game4_async_cb</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, events_init.o(i.game4_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = game4_async_cb &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game4_event_handler)
</UL>
<P><STRONG><a name="[b3]"></a>game5_async_cb</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, events_init.o(i.game5_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = game5_async_cb &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game5_event_handler)
</UL>
<P><STRONG><a name="[35b]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[113]"></a>home_digital_clock_1_timer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, widgets_init.o(i.home_digital_clock_1_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = home_digital_clock_1_timer &rArr; lv_dclock_set_text_fmt &rArr; lv_dclock_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_count_12
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup_scr_home.o(i.setup_scr_home)
</UL>
<P><STRONG><a name="[115]"></a>kb_event_cb</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, widgets_init.o(i.kb_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = kb_event_cb &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gui_guider.o(i.setup_ui)
</UL>
<P><STRONG><a name="[39a]"></a>lv_anim_del</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lv_anim.o(i.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_destructor
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_destructor
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[39e]"></a>lv_anim_get</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[2c1]"></a>lv_anim_init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_anim.o(i.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_anim_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[fa]"></a>lv_anim_path_ease_in_out</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_path_ease_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_anim_path_ease_in_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(i.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[ef]"></a>lv_anim_path_ease_out</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_anim_path_ease_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
<LI> lv_roller.o(i.refr_position)
</UL>
<P><STRONG><a name="[be]"></a>lv_anim_path_linear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_path_linear
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_anim.o(i.lv_anim_init)
<LI> lv_theme_default.o(i.style_init)
<LI> lv_style.o(i.lv_style_transition_dsc_init)
</UL>
<P><STRONG><a name="[bd]"></a>lv_anim_path_step</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_path_step))
<BR>[Address Reference Count : 7]<UL><LI> lv_textarea.o(i.label_event_cb)
<LI> lv_textarea.o(i.lv_textarea_add_char)
<LI> lv_textarea.o(i.lv_textarea_add_text)
<LI> lv_textarea.o(i.lv_textarea_constructor)
<LI> lv_textarea.o(i.lv_textarea_event)
<LI> lv_textarea.o(i.lv_textarea_set_cursor_pos)
<LI> lv_textarea.o(i.lv_textarea_set_text)
</UL>
<P><STRONG><a name="[443]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[2c2]"></a>lv_anim_start</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, lv_anim.o(i.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[3aa]"></a>lv_arc_set_bg_angles</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, lv_arc.o(i.lv_arc_set_bg_angles))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_arc_set_bg_angles &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[2d6]"></a>lv_arc_set_end_angle</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lv_arc.o(i.lv_arc_set_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_end_angle
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[3ab]"></a>lv_arc_set_rotation</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_arc.o(i.lv_arc_set_rotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_arc_set_rotation &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
</UL>

<P><STRONG><a name="[2d7]"></a>lv_arc_set_start_angle</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lv_arc.o(i.lv_arc_set_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arc_anim_start_angle
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
</UL>

<P><STRONG><a name="[27a]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[33d]"></a>lv_area_increase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_increase))
<BR><BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[3ee]"></a>lv_area_move</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_move))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[282]"></a>lv_area_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[aa]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.flex_update)
</UL>
<P><STRONG><a name="[a9]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.flex_update)
</UL>
<P><STRONG><a name="[370]"></a>lv_async_call</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_async.o(i.lv_async_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_set_repeat_count
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_1_ta_1_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game5_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game4_event_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_event_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_event_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_event_handler
</UL>

<P><STRONG><a name="[3a6]"></a>lv_atan2</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, lv_math.o(i.lv_atan2))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[4b2]"></a>lv_bar_get_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4b3]"></a>lv_bar_get_start_value</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_get_start_value))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4b4]"></a>lv_bar_get_value</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[3af]"></a>lv_bar_set_start_value</STRONG> (Thumb, 180 bytes, Stack size 88 bytes, lv_bar.o(i.lv_bar_set_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_bar_set_start_value &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[3ad]"></a>lv_bar_set_value</STRONG> (Thumb, 172 bytes, Stack size 88 bytes, lv_bar.o(i.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_bar_set_value &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[39f]"></a>lv_bezier3</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lv_math.o(i.lv_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
</UL>

<P><STRONG><a name="[3b0]"></a>lv_btn_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_btn.o(i.lv_btn_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_btn_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[37f]"></a>lv_btnmatrix_clear_btn_ctrl_all</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lv_btnmatrix.o(i.lv_btnmatrix_clear_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lv_btnmatrix_clear_btn_ctrl_all &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>

<P><STRONG><a name="[3b5]"></a>lv_btnmatrix_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_btnmatrix.o(i.lv_btnmatrix_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_btnmatrix_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[3b8]"></a>lv_btnmatrix_get_btn_text</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_btnmatrix.o(i.lv_btnmatrix_get_btn_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_btnmatrix_get_btn_text &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[2e0]"></a>lv_btnmatrix_get_selected_btn</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_btnmatrix.o(i.lv_btnmatrix_get_selected_btn))
<BR><BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[339]"></a>lv_btnmatrix_has_btn_ctrl</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_btnmatrix.o(i.lv_btnmatrix_has_btn_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[380]"></a>lv_btnmatrix_set_btn_ctrl</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, lv_btnmatrix.o(i.lv_btnmatrix_set_btn_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[3b9]"></a>lv_btnmatrix_set_btn_ctrl_all</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, lv_btnmatrix.o(i.lv_btnmatrix_set_btn_ctrl_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lv_btnmatrix_set_btn_ctrl_all &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[3ba]"></a>lv_btnmatrix_set_ctrl_map</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btnmatrix.o(i.lv_btnmatrix_set_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>

<P><STRONG><a name="[3b4]"></a>lv_btnmatrix_set_map</STRONG> (Thumb, 622 bytes, Stack size 88 bytes, lv_btnmatrix.o(i.lv_btnmatrix_set_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_constructor
</UL>

<P><STRONG><a name="[3bb]"></a>lv_btnmatrix_set_one_checked</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lv_btnmatrix.o(i.lv_btnmatrix_set_one_checked))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lv_btnmatrix_set_one_checked &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[3bc]"></a>lv_btnmatrix_set_selected_btn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_btnmatrix.o(i.lv_btnmatrix_set_selected_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = lv_btnmatrix_set_selected_btn &rArr; invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
</UL>

<P><STRONG><a name="[4fd]"></a>lv_calendar_get_showed_date</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_calendar.o(i.lv_calendar_get_showed_date))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[3c0]"></a>lv_calendar_set_showed_date</STRONG> (Thumb, 606 bytes, Stack size 40 bytes, lv_calendar.o(i.lv_calendar_set_showed_date))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_selected_btn
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[3c3]"></a>lv_chart_get_point_pos_by_id</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, lv_chart.o(i.lv_chart_get_point_pos_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lv_chart_get_point_pos_by_id &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[3c4]"></a>lv_chart_get_x_start_point</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_chart.o(i.lv_chart_get_x_start_point), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>

<P><STRONG><a name="[2fd]"></a>lv_color_darken</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lv_color.o(i.lv_color_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_darken
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dark_color_filter_cb
</UL>

<P><STRONG><a name="[363]"></a>lv_color_fill</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, lv_color.o(i.lv_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[3c9]"></a>lv_color_hsv_to_rgb</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, lv_color.o(i.lv_color_hsv_to_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_hsv_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[3c6]"></a>lv_colorwheel_set_hsv</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lv_colorwheel.o(i.lv_colorwheel_set_hsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lv_colorwheel_set_hsv &rArr; refr_knob_pos &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[3ca]"></a>lv_dclock_create</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_dclock.o(i.lv_dclock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = lv_dclock_create &rArr; lv_dclock_set_text_fmt &rArr; lv_dclock_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
</UL>

<P><STRONG><a name="[381]"></a>lv_dclock_set_text_fmt</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lv_dclock.o(i.lv_dclock_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lv_dclock_set_text_fmt &rArr; lv_dclock_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_digital_clock_1_timer
</UL>

<P><STRONG><a name="[108]"></a>lv_demo_task</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lvgl_demo.o(i.lv_demo_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 988<LI>Call Chain = lv_demo_task &rArr; setup_ui &rArr; setup_scr_screen_1 &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_demo.o(i.lvgl_demo_init)
</UL>
<P><STRONG><a name="[3d5]"></a>lv_disp_draw_buf_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_draw_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_disp_draw_buf_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[3d6]"></a>lv_disp_drv_init</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_hal_disp.o(i.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_disp_drv_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[3d7]"></a>lv_disp_drv_register</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, lv_hal_disp.o(i.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_is_inited
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_get
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init
</UL>

<P><STRONG><a name="[3de]"></a>lv_disp_enable_invalidation</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_disp.o(i.lv_disp_enable_invalidation))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_disp_enable_invalidation &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
</UL>

<P><STRONG><a name="[30b]"></a>lv_disp_flush_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush
</UL>

<P><STRONG><a name="[275]"></a>lv_disp_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_enable_invalidation
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_anim_start
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[396]"></a>lv_disp_get_dpi</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_dpx
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[32c]"></a>lv_disp_get_draw_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_draw_buf))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>

<P><STRONG><a name="[27c]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[28a]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_disp_get_layer_sys &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_cursor
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[384]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_disp_get_layer_top &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[3df]"></a>lv_disp_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
</UL>

<P><STRONG><a name="[385]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_disp_get_scr_act &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[3e0]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_disp_get_scr_prev &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[3e1]"></a>lv_disp_get_theme</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_theme
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[281]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[2b6]"></a>lv_disp_is_invalidation_enabled</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_is_invalidation_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_disp_is_invalidation_enabled &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[3e2]"></a>lv_disp_load_scr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_load_scr))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = lv_disp_load_scr &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
</UL>

<P><STRONG><a name="[3a4]"></a>lv_draw_arc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_draw_arc.o(i.lv_draw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_draw_arc
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[3a2]"></a>lv_draw_arc_dsc_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_draw_arc.o(i.lv_draw_arc_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_draw_arc_dsc_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[38f]"></a>lv_draw_arc_get_area</STRONG> (Thumb, 976 bytes, Stack size 56 bytes, lv_draw_arc.o(i.lv_draw_arc_get_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_draw_arc_get_area
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[320]"></a>lv_draw_img</STRONG> (Thumb, 1030 bytes, Stack size 168 bytes, lv_draw_img.o(i.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[31f]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_draw_img_dsc_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[42e]"></a>lv_draw_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw.o(i.lv_draw_init))
<BR><BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[31e]"></a>lv_draw_label</STRONG> (Thumb, 1942 bytes, Stack size 272 bytes, lv_draw_label.o(i.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[31d]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_draw_label.o(i.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_draw_label_dsc_init &rArr; lv_palette_main &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[51f]"></a>lv_draw_layer_adjust</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_layer.o(i.lv_draw_layer_adjust))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[520]"></a>lv_draw_layer_blend</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw_layer.o(i.lv_draw_layer_blend))
<BR><BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[3e8]"></a>lv_draw_layer_create</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lv_draw_layer.o(i.lv_draw_layer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_draw_layer_create &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[3ea]"></a>lv_draw_layer_destroy</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_draw_layer.o(i.lv_draw_layer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_draw_layer_destroy &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_wait_for_finish
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[344]"></a>lv_draw_line</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_line.o(i.lv_draw_line))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[340]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_draw_line.o(i.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_draw_line_dsc_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[310]"></a>lv_draw_mask_add</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_draw_mask_add &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[3ec]"></a>lv_draw_mask_angle_init</STRONG> (Thumb, 326 bytes, Stack size 48 bytes, lv_draw_mask.o(i.lv_draw_mask_angle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_draw_mask_angle_init &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
</UL>

<P><STRONG><a name="[314]"></a>lv_draw_mask_apply</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[317]"></a>lv_draw_mask_free_param</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_free_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_draw_mask_free_param &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[30d]"></a>lv_draw_mask_is_any</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_draw_mask.o(i.lv_draw_mask_is_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_draw_mask_is_any &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[3ed]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_mask_line_points_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
</UL>

<P><STRONG><a name="[30f]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 1542 bytes, Stack size 88 bytes, lv_draw_mask.o(i.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[3f4]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
</UL>

<P><STRONG><a name="[316]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[327]"></a>lv_draw_rect</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_draw_rect))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[325]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_draw_rect_dsc_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[cb]"></a>lv_draw_sw_arc</STRONG> (Thumb, 2964 bytes, Stack size 392 bytes, lv_draw_sw_arc.o(i.lv_draw_sw_arc))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = lv_draw_sw_arc &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[cd]"></a>lv_draw_sw_bg</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_draw_sw_rect.o(i.lv_draw_sw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = lv_draw_sw_bg &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[312]"></a>lv_draw_sw_blend</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_draw_sw_blend.o(i.lv_draw_sw_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_sw_blend &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[d9]"></a>lv_draw_sw_blend_basic</STRONG> (Thumb, 1686 bytes, Stack size 120 bytes, lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_draw_sw_blend_basic &rArr; map_normal &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d4]"></a>lv_draw_sw_buffer_copy</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lv_draw_sw.o(i.lv_draw_sw_buffer_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_sw_buffer_copy &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[cf]"></a>lv_draw_sw_img_decoded</STRONG> (Thumb, 1412 bytes, Stack size 216 bytes, lv_draw_sw_img.o(i.lv_draw_sw_img_decoded))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = lv_draw_sw_img_decoded &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_transform
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[c3]"></a>lv_draw_sw_init_ctx</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_draw_sw.o(i.lv_draw_sw_init_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_draw_sw_init_ctx &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_init)
</UL>
<P><STRONG><a name="[d6]"></a>lv_draw_sw_layer_adjust</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_draw_sw_layer.o(i.lv_draw_sw_layer_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_sw_layer_adjust &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d7]"></a>lv_draw_sw_layer_blend</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lv_draw_sw_layer.o(i.lv_draw_sw_layer_blend))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = lv_draw_sw_layer_blend &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cache_invalidate_src
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_wait_for_finish
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d5]"></a>lv_draw_sw_layer_create</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, lv_draw_sw_layer.o(i.lv_draw_sw_layer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_draw_sw_layer_create &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d8]"></a>lv_draw_sw_layer_destroy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_draw_sw_layer.o(i.lv_draw_sw_layer_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_draw_sw_layer_destroy &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[ce]"></a>lv_draw_sw_letter</STRONG> (Thumb, 1124 bytes, Stack size 184 bytes, lv_draw_sw_letter.o(i.lv_draw_sw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_draw_sw_letter &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d0]"></a>lv_draw_sw_line</STRONG> (Thumb, 2064 bytes, Stack size 344 bytes, lv_draw_sw_line.o(i.lv_draw_sw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_draw_sw_line &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d1]"></a>lv_draw_sw_polygon</STRONG> (Thumb, 706 bytes, Stack size 96 bytes, lv_draw_sw_polygon.o(i.lv_draw_sw_polygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_draw_sw_polygon &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[cc]"></a>lv_draw_sw_rect</STRONG> (Thumb, 498 bytes, Stack size 64 bytes, lv_draw_sw_rect.o(i.lv_draw_sw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 976<LI>Call Chain = lv_draw_sw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d2]"></a>lv_draw_sw_transform</STRONG> (Thumb, 2348 bytes, Stack size 248 bytes, lv_draw_sw_transform.o(i.lv_draw_sw_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_draw_sw_transform &rArr; lv_memset_ff
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[d3]"></a>lv_draw_sw_wait_for_finish</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_draw_sw.o(i.lv_draw_sw_wait_for_finish))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw.o(i.lv_draw_sw_init_ctx)
</UL>
<P><STRONG><a name="[3f0]"></a>lv_draw_transform</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, lv_draw_transform.o(i.lv_draw_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_draw_transform &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
</UL>

<P><STRONG><a name="[3eb]"></a>lv_draw_wait_for_finish</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_draw.o(i.lv_draw_wait_for_finish))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[3f6]"></a>lv_dropdown_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_dropdown.o(i.lv_dropdown_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_dropdown_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[530]"></a>lv_dropdown_get_options</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_dropdown.o(i.lv_dropdown_get_options))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
</UL>

<P><STRONG><a name="[4fe]"></a>lv_dropdown_get_selected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_dropdown.o(i.lv_dropdown_get_selected))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[3fb]"></a>lv_dropdown_get_selected_str</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lv_dropdown.o(i.lv_dropdown_get_selected_str), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[3fa]"></a>lv_dropdown_open</STRONG> (Thumb, 584 bytes, Stack size 32 bytes, lv_dropdown.o(i.lv_dropdown_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = lv_dropdown_open &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[405]"></a>lv_dropdown_set_options</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lv_dropdown.o(i.lv_dropdown_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_dropdown_set_options &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[407]"></a>lv_dropdown_set_options_static</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lv_dropdown.o(i.lv_dropdown_set_options_static), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>

<P><STRONG><a name="[408]"></a>lv_dropdown_set_selected</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_dropdown.o(i.lv_dropdown_set_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lv_dropdown_set_selected &rArr; position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
</UL>

<P><STRONG><a name="[2ef]"></a>lv_event_get_code</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_4_event_handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_3_event_handler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_2_event_handler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_1_event_handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_1_ta_1_event_handler
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_1_event_handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_event_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_btn_3_event_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_btn_2_event_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_event_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_6_event_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_5_event_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_4_event_handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_3_event_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_2_event_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_1_event_handler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game5_event_handler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game4_event_handler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_event_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_event_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_event_handler
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_label_3_event_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_btn_2_event_handler
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_img_2_event_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_img_1_event_handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_btn_3_event_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_btn_1_event_handler
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_event_cb
</UL>

<P><STRONG><a name="[46e]"></a>lv_event_get_current_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_current_target))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[32f]"></a>lv_event_get_draw_ctx</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_event.o(i.lv_event_get_draw_ctx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_event_get_draw_ctx &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[409]"></a>lv_event_get_indev</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lv_event.o(i.lv_event_get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_event_get_indev &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[330]"></a>lv_event_get_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[2df]"></a>lv_event_get_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_event_cb
</UL>

<P><STRONG><a name="[451]"></a>lv_event_get_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year_event_cb
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
</UL>

<P><STRONG><a name="[2ae]"></a>lv_event_send</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, lv_event.o(i.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_anim_start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen1_async_cb
</UL>

<P><STRONG><a name="[3b6]"></a>lv_event_set_ext_draw_size</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_event.o(i.lv_event_set_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_event_set_ext_draw_size &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[40a]"></a>lv_extra_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_extra.o(i.lv_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_extra_init &rArr; lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[40b]"></a>lv_flex_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_flex.o(i.lv_flex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[13c]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 6]<UL><LI> lv_font_montserrat_14.o(.constdata)
<LI> lv_font_antonio_regular_17.o(.constdata)
<LI> lv_font_montserratmedium_16.o(.constdata)
<LI> lv_font_montserratmedium_14.o(.constdata)
<LI> lv_font_montserratmedium_18.o(.constdata)
<LI> lv_font_sourcehanserifsc_regular_18.o(.constdata)
</UL>
<P><STRONG><a name="[3f3]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_font.o(i.lv_font_get_glyph_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_font_get_glyph_bitmap &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
</UL>

<P><STRONG><a name="[3f2]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lv_font.o(i.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_password_bullet
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[13b]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 6]<UL><LI> lv_font_montserrat_14.o(.constdata)
<LI> lv_font_antonio_regular_17.o(.constdata)
<LI> lv_font_montserratmedium_16.o(.constdata)
<LI> lv_font_montserratmedium_14.o(.constdata)
<LI> lv_font_montserratmedium_18.o(.constdata)
<LI> lv_font_sourcehanserifsc_regular_18.o(.constdata)
</UL>
<P><STRONG><a name="[2c9]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, lv_font.o(i.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[40f]"></a>lv_fs_close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_fs_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[410]"></a>lv_fs_get_ext</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_get_ext
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[411]"></a>lv_fs_open</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, lv_fs.o(i.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_fs_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[412]"></a>lv_fs_read</STRONG> (Thumb, 418 bytes, Stack size 56 bytes, lv_fs.o(i.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_fs_read &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[41e]"></a>lv_fs_seek</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[413]"></a>lv_gradient_calculate</STRONG> (Thumb, 414 bytes, Stack size 32 bytes, lv_draw_sw_gradient.o(i.lv_gradient_calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_gradient_calculate &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
</UL>

<P><STRONG><a name="[318]"></a>lv_gradient_cleanup</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(i.lv_gradient_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_gradient_cleanup &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[311]"></a>lv_gradient_get</STRONG> (Thumb, 628 bytes, Stack size 96 bytes, lv_draw_sw_gradient.o(i.lv_gradient_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_gradient_get &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_calculate
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iterate_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[415]"></a>lv_gradient_set_cache_size</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_draw_sw_gradient.o(i.lv_gradient_set_cache_size), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>

<P><STRONG><a name="[40c]"></a>lv_grid_init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, lv_grid.o(i.lv_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[416]"></a>lv_group_add_obj</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, lv_group.o(i.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_group_add_obj &rArr; lv_group_remove_obj &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[418]"></a>lv_group_focus_next</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[387]"></a>lv_group_focus_obj</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lv_group_focus_obj &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[419]"></a>lv_group_focus_prev</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[467]"></a>lv_group_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[3a8]"></a>lv_group_get_editing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[427]"></a>lv_group_get_focused</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[41a]"></a>lv_group_get_obj_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_obj_count))
<BR><BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[417]"></a>lv_group_remove_obj</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_group_remove_obj &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[41b]"></a>lv_group_send_data</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[3a9]"></a>lv_group_set_editing</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3f1]"></a>lv_img_cache_invalidate_src</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_img_cache.o(i.lv_img_cache_invalidate_src))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_blend
</UL>

<P><STRONG><a name="[41f]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[41d]"></a>lv_img_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_img.o(i.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_img_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[82]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_fs_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[7f]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_read &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[80]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 828 bytes, Stack size 48 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_fs_read &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[81]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 988 bytes, Stack size 72 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[3e4]"></a>lv_img_decoder_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[420]"></a>lv_img_decoder_create</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_create), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>

<P><STRONG><a name="[31b]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_img_decoder_get_info &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[29e]"></a>lv_img_decoder_open</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, lv_img_decoder.o(i.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[3e5]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[423]"></a>lv_img_set_angle</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lv_img.o(i.lv_img_set_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = lv_img_set_angle &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_enable_invalidation
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[424]"></a>lv_img_set_pivot</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, lv_img.o(i.lv_img_set_pivot))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = lv_img_set_pivot &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_enable_invalidation
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[421]"></a>lv_img_set_src</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, lv_img.o(i.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_img_set_src &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[31a]"></a>lv_img_src_get_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[425]"></a>lv_indev_drv_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_indev_drv_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[426]"></a>lv_indev_drv_register</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_hal_indev.o(i.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_indev_drv_register &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[2a3]"></a>lv_indev_get_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[376]"></a>lv_indev_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_indev.o(i.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[346]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[3a5]"></a>lv_indev_get_point</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[475]"></a>lv_indev_get_scroll_dir</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[3f8]"></a>lv_indev_get_scroll_obj</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_scroll_obj))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[377]"></a>lv_indev_get_type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[4af]"></a>lv_indev_get_vect</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[e5]"></a>lv_indev_read_timer_cb</STRONG> (Thumb, 3078 bytes, Stack size 64 bytes, lv_indev.o(i.lv_indev_read_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_indev_read_timer_cb &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(i.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[429]"></a>lv_indev_reset</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_indev.o(i.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[3b7]"></a>lv_indev_reset_long_press</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_indev.o(i.lv_indev_reset_long_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_reset_long_press
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[4b0]"></a>lv_indev_scroll_throw_predict</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lv_indev_scroll.o(i.lv_indev_scroll_throw_predict))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[383]"></a>lv_indev_search_obj</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_indev.o(i.lv_indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + In Cycle
<LI>Call Chain = lv_indev_search_obj &rArr;  lv_indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[42c]"></a>lv_indev_set_cursor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_indev.o(i.lv_indev_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_indev_set_cursor &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init
</UL>

<P><STRONG><a name="[3c7]"></a>lv_indev_wait_release</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_wait_release))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[3ce]"></a>lv_init</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lv_obj.o(i.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_init &rArr; lv_extra_init &rArr; lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
</UL>

<P><STRONG><a name="[432]"></a>lv_keyboard_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_keyboard.o(i.lv_keyboard_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_keyboard_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
</UL>

<P><STRONG><a name="[e6]"></a>lv_keyboard_def_event_cb</STRONG> (Thumb, 520 bytes, Stack size 16 bytes, lv_keyboard.o(i.lv_keyboard_def_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 860<LI>Call Chain = lv_keyboard_def_event_cb &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_btn_text
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_one_line
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_cursor_pos
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(i.lv_keyboard_constructor)
</UL>
<P><STRONG><a name="[43b]"></a>lv_keyboard_set_textarea</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_keyboard.o(i.lv_keyboard_set_textarea))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = lv_keyboard_set_textarea &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
</UL>

<P><STRONG><a name="[28b]"></a>lv_label_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[43e]"></a>lv_label_get_letter_on</STRONG> (Thumb, 550 bytes, Stack size 80 bytes, lv_label.o(i.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_label_get_letter_on &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[440]"></a>lv_label_get_letter_pos</STRONG> (Thumb, 508 bytes, Stack size 96 bytes, lv_label.o(i.lv_label_get_letter_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = lv_label_get_letter_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[4ad]"></a>lv_label_get_recolor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_get_recolor))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[32a]"></a>lv_label_get_text</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_get_text))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[4ee]"></a>lv_label_get_text_selection_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_get_text_selection_end))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[4ed]"></a>lv_label_get_text_selection_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_get_text_selection_start))
<BR><BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[441]"></a>lv_label_ins_text</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, lv_label.o(i.lv_label_ins_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_label_ins_text &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
</UL>

<P><STRONG><a name="[442]"></a>lv_label_is_char_under_pos</STRONG> (Thumb, 488 bytes, Stack size 120 bytes, lv_label.o(i.lv_label_is_char_under_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = lv_label_is_char_under_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[444]"></a>lv_label_set_long_mode</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[294]"></a>lv_label_set_text</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_label_3_event_handler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[297]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, lv_label.o(i.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
</UL>

<P><STRONG><a name="[445]"></a>lv_label_set_text_sel_end</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_set_text_sel_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_label_set_text_sel_end &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[446]"></a>lv_label_set_text_sel_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.lv_label_set_text_sel_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
</UL>

<P><STRONG><a name="[3ff]"></a>lv_label_set_text_static</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_text_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_label_set_text_static &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[40d]"></a>lv_layout_register</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_layout_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_layout_register &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>

<P><STRONG><a name="[449]"></a>lv_line_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_line.o(i.lv_line_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_line_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[44a]"></a>lv_line_set_points</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_line.o(i.lv_line_set_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = lv_line_set_points &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[343]"></a>lv_map</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lv_math.o(i.lv_map))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_in_out
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[2b8]"></a>lv_mem_alloc</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_prev
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
</UL>

<P><STRONG><a name="[287]"></a>lv_mem_buf_free_all</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_mem.o(i.lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_mem_buf_free_all &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[30e]"></a>lv_mem_buf_get</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, lv_mem.o(i.lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[315]"></a>lv_mem_buf_release</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_buf_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_mem_buf_release &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_polygon
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>

<P><STRONG><a name="[27f]"></a>lv_mem_free</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_destroy
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_destructor
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_destructor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_destructor
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_timer_cb
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_destructor
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_destructor
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_destructor
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_destructor
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_destructor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_destructor
</UL>

<P><STRONG><a name="[42d]"></a>lv_mem_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_mem_init &rArr; lv_tlsf_create_with_pool &rArr; lv_tlsf_add_pool &rArr; block_insert &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[298]"></a>lv_mem_monitor</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_mem_monitor &rArr; lv_tlsf_walk_pool &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_get_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[379]"></a>lv_mem_realloc</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_constructor
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_bullet
</UL>

<P><STRONG><a name="[338]"></a>lv_memcpy</STRONG> (Thumb, 620 bytes, Stack size 16 bytes, lv_mem.o(i.lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_buffer_copy
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill_oldest_item
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[313]"></a>lv_memset</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, lv_mem.o(i.lv_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[285]"></a>lv_memset_00</STRONG> (Thumb, 218 bytes, Stack size 4 bytes, lv_mem.o(i.lv_memset_00))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_letter
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_create
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_layer_adjust
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_init_ctx
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_set_cache_size
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kill_oldest_item
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[322]"></a>lv_memset_ff</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, lv_mem.o(i.lv_memset_ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_memset_ff
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_line
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_img_decoded
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[452]"></a>lv_menu_set_page</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, lv_menu.o(i.lv_menu_set_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = lv_menu_set_page &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_back_event_cb
</UL>

<P><STRONG><a name="[349]"></a>lv_obj_add_event_cb</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lv_event.o(i.lv_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_add_event_cb &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_settings
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_1
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_pause
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_home
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game5
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game4
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game3
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game2
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game1
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_end
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_character
</UL>

<P><STRONG><a name="[398]"></a>lv_obj_add_flag</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_add_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_cursor
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_set_textarea
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_constructor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kb_event_cb
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[3fc]"></a>lv_obj_add_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[45a]"></a>lv_obj_add_style</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lv_obj_style.o(i.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[295]"></a>lv_obj_align</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[401]"></a>lv_obj_align_to</STRONG> (Thumb, 1068 bytes, Stack size 56 bytes, lv_obj_pos.o(i.lv_obj_align_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[2ba]"></a>lv_obj_allocate_spec_attr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_allocate_spec_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>

<P><STRONG><a name="[461]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
</UL>

<P><STRONG><a name="[3ae]"></a>lv_obj_calculate_ext_draw_size</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_calculate_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[404]"></a>lv_obj_calculate_style_text_align</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_obj_style.o(i.lv_obj_calculate_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_calculate_style_text_align &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>

<P><STRONG><a name="[529]"></a>lv_obj_check_type</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_check_type))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[3b1]"></a>lv_obj_class_create_obj</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, lv_obj_class.o(i.lv_obj_class_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_class_create_obj &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_create
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_create
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
</UL>

<P><STRONG><a name="[3b2]"></a>lv_obj_class_init_obj</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lv_obj_class.o(i.lv_obj_class_init_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_create
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_create
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
</UL>

<P><STRONG><a name="[468]"></a>lv_obj_clean</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_obj_tree.o(i.lv_obj_clean))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lv_obj_clean &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[3a0]"></a>lv_obj_clear_flag</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_cursor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_value_changed_event_cb
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_section_constructor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinner_constructor
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_constructor
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdownlist_constructor
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_constructor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_constructor
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_constructor
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
</UL>

<P><STRONG><a name="[3f7]"></a>lv_obj_clear_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_set_textarea
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[2e4]"></a>lv_obj_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[2ec]"></a>lv_obj_del</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_obj_tree.o(i.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lv_obj_del &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_destructor
</UL>

<P><STRONG><a name="[334]"></a>lv_obj_draw_dsc_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_draw.o(i.lv_obj_draw_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_obj_draw_dsc_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[464]"></a>lv_obj_enable_style_refresh</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(i.lv_obj_enable_style_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[32e]"></a>lv_obj_event_base</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_event.o(i.lv_obj_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_event_base
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[324]"></a>lv_obj_get_child</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[364]"></a>lv_obj_get_child_cnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_get_child_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
</UL>

<P><STRONG><a name="[422]"></a>lv_obj_get_click_area</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_click_area
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[3cb]"></a>lv_obj_get_content_coords</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_content_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_get_content_coords &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[2f8]"></a>lv_obj_get_content_height</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_get_content_height &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[2f7]"></a>lv_obj_get_content_width</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_get_content_width &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[331]"></a>lv_obj_get_coords</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_pos.o(i.lv_obj_get_coords))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[395]"></a>lv_obj_get_disp</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, lv_obj_tree.o(i.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_obj_get_disp &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_load_anim_start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[386]"></a>lv_obj_get_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[a8]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(i.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.find_track_end)
</UL>
<P><STRONG><a name="[47c]"></a>lv_obj_get_index</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lv_obj_tree.o(i.lv_obj_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
</UL>

<P><STRONG><a name="[45e]"></a>lv_obj_get_local_style_prop</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_obj_style.o(i.lv_obj_get_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_obj_get_local_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[2a5]"></a>lv_obj_get_parent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;theme_apply
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_changed_event_cb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month_event_cb
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
</UL>

<P><STRONG><a name="[3f5]"></a>lv_obj_get_screen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_get_screen))
<BR><BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
</UL>

<P><STRONG><a name="[2a9]"></a>lv_obj_get_scroll_bottom</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[2a7]"></a>lv_obj_get_scroll_dir</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[2f6]"></a>lv_obj_get_scroll_end</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_obj_get_scroll_end &rArr; lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
</UL>

<P><STRONG><a name="[2aa]"></a>lv_obj_get_scroll_left</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = lv_obj_get_scroll_left &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>

<P><STRONG><a name="[2ab]"></a>lv_obj_get_scroll_right</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = lv_obj_get_scroll_right &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
</UL>

<P><STRONG><a name="[2ad]"></a>lv_obj_get_scroll_snap_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_snap_x))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[2ac]"></a>lv_obj_get_scroll_snap_y</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_snap_y))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[2a8]"></a>lv_obj_get_scroll_top</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_top))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[337]"></a>lv_obj_get_scroll_x</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_x))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[336]"></a>lv_obj_get_scroll_y</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_y))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[458]"></a>lv_obj_get_scrollbar_area</STRONG> (Thumb, 1948 bytes, Stack size 112 bytes, lv_obj_scroll.o(i.lv_obj_get_scrollbar_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_dir
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
</UL>

<P><STRONG><a name="[472]"></a>lv_obj_get_scrollbar_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scrollbar_mode))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[473]"></a>lv_obj_get_self_height</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_self_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[474]"></a>lv_obj_get_self_width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_self_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[36c]"></a>lv_obj_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
</UL>

<P><STRONG><a name="[455]"></a>lv_obj_get_style_opa_recursive</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_obj_style.o(i.lv_obj_get_style_opa_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_get_style_opa_recursive &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[2a4]"></a>lv_obj_get_style_prop</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, lv_obj_style.o(i.lv_obj_get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_prop_lookup_flags
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y2
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_password_bullet
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[463]"></a>lv_obj_get_transformed_area</STRONG> (Thumb, 344 bytes, Stack size 40 bytes, lv_obj_pos.o(i.lv_obj_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[a7]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(i.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.find_track_end)
</UL>
<P><STRONG><a name="[479]"></a>lv_obj_get_x</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_get_x &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
</UL>

<P><STRONG><a name="[402]"></a>lv_obj_get_y</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[403]"></a>lv_obj_get_y2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_y2))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_obj_get_y2 &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[2a6]"></a>lv_obj_has_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_has_flag))
<BR><BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[365]"></a>lv_obj_has_flag_any</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_has_flag_any))
<BR><BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[41c]"></a>lv_obj_has_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_has_state))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
</UL>

<P><STRONG><a name="[42b]"></a>lv_obj_hit_test</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_obj_hit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_obj_hit_test &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[3a3]"></a>lv_obj_init_draw_arc_dsc</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_arc_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_init_draw_arc_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[332]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[329]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[341]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[326]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 790 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[2bc]"></a>lv_obj_invalidate</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_set_hsv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options_static
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_constructor
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_anim_ready
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_switch_anim_exec_cb
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_y_anim
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_x_anim
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_bullet
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
</UL>

<P><STRONG><a name="[2fc]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_is_invalidation_enabled
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cursor_blink_anim_cb
</UL>

<P><STRONG><a name="[428]"></a>lv_obj_is_editable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_obj_class.o(i.lv_obj_is_editable))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[456]"></a>lv_obj_is_layout_positioned</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_is_layout_positioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = lv_obj_is_layout_positioned &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>

<P><STRONG><a name="[2ea]"></a>lv_obj_is_valid</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lv_obj.o(i.lv_obj_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_obj_is_valid &rArr; obj_valid_child &rArr;  obj_valid_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_valid_child
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_cb
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_move_timer_cb
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_digital_clock_1_timer
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game5_async_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game4_async_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_async_cb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_async_cb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_async_cb
</UL>

<P><STRONG><a name="[38e]"></a>lv_obj_is_visible</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = lv_obj_is_visible &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[457]"></a>lv_obj_mark_layout_as_dirty</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_mark_layout_as_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_mark_layout_as_dirty &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
</UL>

<P><STRONG><a name="[2bb]"></a>lv_obj_move_children_by</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_obj_move_children_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = lv_obj_move_children_by &rArr;  lv_obj_move_children_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_scroll_by_raw
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[47b]"></a>lv_obj_move_to</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, lv_obj_pos.o(i.lv_obj_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[3fe]"></a>lv_obj_move_to_index</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, lv_obj_tree.o(i.lv_obj_move_to_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_obj_move_to_index &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ta_event_cb
</UL>

<P><STRONG><a name="[39d]"></a>lv_obj_readjust_scroll</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_readjust_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>

<P><STRONG><a name="[47d]"></a>lv_obj_redraw</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, lv_refr.o(i.lv_obj_redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = lv_obj_redraw &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[39c]"></a>lv_obj_refr_pos</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, lv_obj_pos.o(i.lv_obj_refr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_refr_pos &rArr; lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>

<P><STRONG><a name="[36a]"></a>lv_obj_refr_size</STRONG> (Thumb, 1800 bytes, Stack size 120 bytes, lv_obj_pos.o(i.lv_obj_refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
</UL>

<P><STRONG><a name="[3b3]"></a>lv_obj_refresh_ext_draw_size</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lv_obj_draw.o(i.lv_obj_refresh_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3c1]"></a>lv_obj_refresh_self_size</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_refresh_self_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_refresh_self_size &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
</UL>

<P><STRONG><a name="[45c]"></a>lv_obj_refresh_style</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, lv_obj_style.o(i.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_prop_lookup_flags
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[480]"></a>lv_obj_remove_local_style_prop</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_obj_style.o(i.lv_obj_remove_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_remove_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scr_anim_ready
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[3da]"></a>lv_obj_remove_style</STRONG> (Thumb, 514 bytes, Stack size 64 bytes, lv_obj_style.o(i.lv_obj_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[483]"></a>lv_obj_report_style_change</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lv_obj_style.o(i.lv_obj_report_style_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_next
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[2b4]"></a>lv_obj_scroll_by</STRONG> (Thumb, 342 bytes, Stack size 88 bytes, lv_obj_scroll.o(i.lv_obj_scroll_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
</UL>

<P><STRONG><a name="[485]"></a>lv_obj_scroll_by_bounded</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, lv_obj_scroll.o(i.lv_obj_scroll_by_bounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + In Cycle
<LI>Call Chain = lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[46a]"></a>lv_obj_scroll_to</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[471]"></a>lv_obj_scroll_to_view_recursive</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to_view_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[470]"></a>lv_obj_scroll_to_x</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = lv_obj_scroll_to_x &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>

<P><STRONG><a name="[46f]"></a>lv_obj_scroll_to_y</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
</UL>

<P><STRONG><a name="[46b]"></a>lv_obj_scrollbar_invalidate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_scrollbar_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
</UL>

<P><STRONG><a name="[3a1]"></a>lv_obj_set_ext_click_area</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_ext_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_ext_click_area &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[454]"></a>lv_obj_set_flex_align</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_flex.o(i.lv_obj_set_flex_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_obj_set_flex_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
</UL>

<P><STRONG><a name="[3be]"></a>lv_obj_set_flex_flow</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_flex.o(i.lv_obj_set_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_flex_flow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_section_constructor
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_cont_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[3bf]"></a>lv_obj_set_flex_grow</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_set_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_obj_set_flex_grow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[400]"></a>lv_obj_set_height</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[453]"></a>lv_obj_set_layout</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_set_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_obj_set_layout &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
</UL>

<P><STRONG><a name="[487]"></a>lv_obj_set_local_style_prop</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_obj_style.o(i.lv_obj_set_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_min_width
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_width
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_rounded
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_opa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_color
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_recolor_opa
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_opa
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_clip_corner
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_side
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_opa
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_color
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[3fd]"></a>lv_obj_set_parent</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, lv_obj_tree.o(i.lv_obj_set_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = lv_obj_set_parent &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_cursor
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_page_constructor
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
</UL>

<P><STRONG><a name="[2e8]"></a>lv_obj_set_pos</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_cursor
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_img_2_event_handler
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_img_1_event_handler
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[48a]"></a>lv_obj_set_scroll_dir</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_set_scroll_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_scroll_dir &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tileview_event_cb
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
</UL>

<P><STRONG><a name="[48b]"></a>lv_obj_set_scroll_snap_x</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_set_scroll_snap_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_scroll_snap_x &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[48c]"></a>lv_obj_set_scroll_snap_y</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_set_scroll_snap_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_scroll_snap_y &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
</UL>

<P><STRONG><a name="[3db]"></a>lv_obj_set_scrollbar_mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_set_scrollbar_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_obj_set_scrollbar_mode &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[2e5]"></a>lv_obj_set_size</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_constructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[45d]"></a>lv_obj_set_style_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[430]"></a>lv_obj_set_style_base_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_base_dir &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[28d]"></a>lv_obj_set_style_bg_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[490]"></a>lv_obj_set_style_bg_grad_dir</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_bg_grad_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_bg_grad_dir &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[491]"></a>lv_obj_set_style_bg_img_src</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_bg_img_src &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
</UL>

<P><STRONG><a name="[28c]"></a>lv_obj_set_style_bg_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[492]"></a>lv_obj_set_style_border_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_style_border_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[493]"></a>lv_obj_set_style_border_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_border_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[494]"></a>lv_obj_set_style_border_side</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_border_side &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[2e7]"></a>lv_obj_set_style_border_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_border_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[495]"></a>lv_obj_set_style_clip_corner</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_clip_corner &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[489]"></a>lv_obj_set_style_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>

<P><STRONG><a name="[496]"></a>lv_obj_set_style_img_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_img_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_img_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[497]"></a>lv_obj_set_style_img_recolor_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_img_recolor_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_img_recolor_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[488]"></a>lv_obj_set_style_layout</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[498]"></a>lv_obj_set_style_line_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_style_line_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[499]"></a>lv_obj_set_style_line_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_line_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_line_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[49a]"></a>lv_obj_set_style_line_rounded</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_line_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_line_rounded &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[49b]"></a>lv_obj_set_style_line_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_line_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[49c]"></a>lv_obj_set_style_min_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_min_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_min_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
</UL>

<P><STRONG><a name="[49d]"></a>lv_obj_set_style_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opa_scale_anim
</UL>

<P><STRONG><a name="[290]"></a>lv_obj_set_style_pad_bottom</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_pad_bottom &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[291]"></a>lv_obj_set_style_pad_left</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_pad_left &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[292]"></a>lv_obj_set_style_pad_right</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_pad_right &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[28f]"></a>lv_obj_set_style_pad_top</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_pad_top &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[2e6]"></a>lv_obj_set_style_radius</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_radius &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[49e]"></a>lv_obj_set_style_shadow_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_style_shadow_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[49f]"></a>lv_obj_set_style_shadow_ofs_x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_shadow_ofs_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a0]"></a>lv_obj_set_style_shadow_ofs_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_shadow_ofs_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a1]"></a>lv_obj_set_style_shadow_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_shadow_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a2]"></a>lv_obj_set_style_shadow_spread</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_shadow_spread &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a3]"></a>lv_obj_set_style_shadow_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_shadow_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[293]"></a>lv_obj_set_style_text_align</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_text_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[28e]"></a>lv_obj_set_style_text_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_style_text_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a4]"></a>lv_obj_set_style_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_text_font &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a5]"></a>lv_obj_set_style_text_letter_space</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_text_letter_space &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a6]"></a>lv_obj_set_style_text_line_space</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_text_line_space &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a7]"></a>lv_obj_set_style_text_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_text_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[48d]"></a>lv_obj_set_style_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
</UL>

<P><STRONG><a name="[45f]"></a>lv_obj_set_style_x</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[460]"></a>lv_obj_set_style_y</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>

<P><STRONG><a name="[3bd]"></a>lv_obj_set_width</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_win_constructor
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_constructor
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[4a8]"></a>lv_obj_set_x</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_x_anim
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[38a]"></a>lv_obj_set_y</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_y_anim
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_y_anim
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>

<P><STRONG><a name="[48f]"></a>lv_obj_style_get_selector_part</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(i.lv_obj_style_get_selector_part))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[48e]"></a>lv_obj_style_get_selector_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(i.lv_obj_style_get_selector_state))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[42a]"></a>lv_obj_transform_point</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_obj_transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + In Cycle
<LI>Call Chain = lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
</UL>

<P><STRONG><a name="[276]"></a>lv_obj_update_layout</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_obj_update_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_constructor
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tileview_tile_constructor
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_settings
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_pause
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_end
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_character
</UL>

<P><STRONG><a name="[37b]"></a>lv_palette_darken</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lv_color.o(i.lv_palette_darken))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_palette_darken &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[37c]"></a>lv_palette_lighten</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lv_color.o(i.lv_palette_lighten))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_palette_lighten &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grey_filter_cb
</UL>

<P><STRONG><a name="[33a]"></a>lv_palette_main</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_color.o(i.lv_palette_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_palette_main &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
</UL>

<P><STRONG><a name="[29c]"></a>lv_point_transform</STRONG> (Thumb, 330 bytes, Stack size 48 bytes, lv_area.o(i.lv_point_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_point_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transform_point
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
</UL>

<P><STRONG><a name="[3cf]"></a>lv_port_disp_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_port_disp.o(i.lv_port_disp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lv_port_disp_init &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
</UL>

<P><STRONG><a name="[3d0]"></a>lv_port_indev_init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lv_port_indev.o(i.lv_port_indev_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_port_indev_init &rArr; lv_img_set_src &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_cursor
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
</UL>

<P><STRONG><a name="[4b9]"></a>lv_pow</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_math.o(i.lv_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[4ac]"></a>lv_roller_set_options</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, lv_roller.o(i.lv_roller_set_options))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = lv_roller_set_options &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_constructor
</UL>

<P><STRONG><a name="[4b1]"></a>lv_roller_set_selected</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_roller.o(i.lv_roller_set_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = lv_roller_set_selected &rArr; refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[3e3]"></a>lv_scr_load_anim</STRONG> (Thumb, 932 bytes, Stack size 176 bytes, lv_disp.o(i.lv_scr_load_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>

<P><STRONG><a name="[342]"></a>lv_snprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lv_printf.o(i.lv_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lv_snprintf &rArr; _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
</UL>

<P><STRONG><a name="[2c5]"></a>lv_style_get_prop</STRONG> (Thumb, 202 bytes, Stack size 20 bytes, lv_style.o(i.lv_style_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>

<P><STRONG><a name="[37a]"></a>lv_style_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_style.o(i.lv_style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_init &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4bb]"></a>lv_style_is_empty</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_style.o(i.lv_style_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_style_is_empty &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[478]"></a>lv_style_prop_get_default</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_prop_get_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_style_prop_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>

<P><STRONG><a name="[40e]"></a>lv_style_register_prop</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, lv_style.o(i.lv_style_register_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_style_register_prop &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>

<P><STRONG><a name="[481]"></a>lv_style_remove_prop</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lv_style.o(i.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[482]"></a>lv_style_reset</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lv_style.o(i.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4bc]"></a>lv_style_set_anim_time</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_anim_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_anim_time &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4bd]"></a>lv_style_set_arc_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_arc_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_arc_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4be]"></a>lv_style_set_arc_rounded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_arc_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_arc_rounded &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4bf]"></a>lv_style_set_arc_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_arc_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_arc_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c0]"></a>lv_style_set_bg_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_bg_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c1]"></a>lv_style_set_bg_grad_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_bg_grad_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_bg_grad_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c2]"></a>lv_style_set_bg_img_src</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_bg_img_src &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c3]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_bg_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c4]"></a>lv_style_set_border_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_border_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c5]"></a>lv_style_set_border_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_border_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_border_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c6]"></a>lv_style_set_border_post</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_border_post &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c7]"></a>lv_style_set_border_side</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_border_side &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c8]"></a>lv_style_set_border_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_border_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4c9]"></a>lv_style_set_clip_corner</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_clip_corner &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4ca]"></a>lv_style_set_color_filter_dsc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_color_filter_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_color_filter_dsc &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4cb]"></a>lv_style_set_color_filter_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_color_filter_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_color_filter_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4cc]"></a>lv_style_set_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_height &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4cd]"></a>lv_style_set_line_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_line_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4ce]"></a>lv_style_set_line_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_line_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4cf]"></a>lv_style_set_max_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_max_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_max_height &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d0]"></a>lv_style_set_max_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_max_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_max_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d1]"></a>lv_style_set_outline_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_outline_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_outline_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d2]"></a>lv_style_set_outline_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_outline_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d3]"></a>lv_style_set_outline_pad</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_outline_pad &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d4]"></a>lv_style_set_outline_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_outline_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d5]"></a>lv_style_set_pad_bottom</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_pad_bottom &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d6]"></a>lv_style_set_pad_column</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_pad_column &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d7]"></a>lv_style_set_pad_left</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_pad_left &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d8]"></a>lv_style_set_pad_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_pad_right &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4d9]"></a>lv_style_set_pad_row</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_pad_row &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[527]"></a>lv_style_set_pad_top</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_pad_top))
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[2c0]"></a>lv_style_set_prop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
</UL>

<P><STRONG><a name="[4db]"></a>lv_style_set_radius</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_radius &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4dc]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4dd]"></a>lv_style_set_shadow_ofs_y</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_shadow_ofs_y &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4de]"></a>lv_style_set_shadow_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_shadow_opa &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4df]"></a>lv_style_set_shadow_spread</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_shadow_spread &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e0]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_shadow_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e1]"></a>lv_style_set_text_align</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_text_align &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e2]"></a>lv_style_set_text_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e3]"></a>lv_style_set_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_text_font &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e4]"></a>lv_style_set_text_line_space</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_text_line_space &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e5]"></a>lv_style_set_transform_height</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_transform_height &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e6]"></a>lv_style_set_transform_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_transform_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e7]"></a>lv_style_set_transition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e8]"></a>lv_style_set_width</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4e9]"></a>lv_style_transition_dsc_init</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, lv_style.o(i.lv_style_transition_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_style_transition_dsc_init &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[2e1]"></a>lv_tabview_set_act</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, lv_tabview.o(i.lv_tabview_set_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_event
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cont_scroll_end_event_cb
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btns_value_changed_event_cb
</UL>

<P><STRONG><a name="[433]"></a>lv_textarea_add_char</STRONG> (Thumb, 422 bytes, Stack size 120 bytes, lv_textarea.o(i.lv_textarea_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 844<LI>Call Chain = lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[38c]"></a>lv_textarea_add_text</STRONG> (Thumb, 330 bytes, Stack size 88 bytes, lv_textarea.o(i.lv_textarea_add_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + In Cycle
<LI>Call Chain = lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_ins
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_ins_text
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_handler
</UL>

<P><STRONG><a name="[4ec]"></a>lv_textarea_clear_selection</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_textarea.o(i.lv_textarea_clear_selection))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = lv_textarea_clear_selection &rArr; lv_label_set_text_sel_start &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_start
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_sel_end
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_start
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text_selection_end
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
</UL>

<P><STRONG><a name="[4ef]"></a>lv_textarea_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_textarea.o(i.lv_textarea_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_textarea_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[435]"></a>lv_textarea_cursor_left</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_cursor_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = lv_textarea_cursor_left &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
</UL>

<P><STRONG><a name="[436]"></a>lv_textarea_cursor_right</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_cursor_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = lv_textarea_cursor_right &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[437]"></a>lv_textarea_del_char</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, lv_textarea.o(i.lv_textarea_del_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 764<LI>Call Chain = lv_textarea_del_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_cut
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
</UL>

<P><STRONG><a name="[438]"></a>lv_textarea_get_cursor_pos</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_get_cursor_pos))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[434]"></a>lv_textarea_get_one_line</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_get_one_line))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
</UL>

<P><STRONG><a name="[4f0]"></a>lv_textarea_get_password_bullet</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_textarea.o(i.lv_textarea_get_password_bullet), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>

<P><STRONG><a name="[439]"></a>lv_textarea_get_text</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_get_text))
<BR><BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen_1_ta_1_event_handler
</UL>

<P><STRONG><a name="[525]"></a>lv_textarea_set_accepted_chars</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_set_accepted_chars))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[4b7]"></a>lv_textarea_set_cursor_click_pos</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_set_cursor_click_pos))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[43a]"></a>lv_textarea_set_cursor_pos</STRONG> (Thumb, 308 bytes, Stack size 88 bytes, lv_textarea.o(i.lv_textarea_set_cursor_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_right
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_event
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_constructor
</UL>

<P><STRONG><a name="[526]"></a>lv_textarea_set_max_length</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_textarea.o(i.lv_textarea_set_max_length))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[4b6]"></a>lv_textarea_set_one_line</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lv_textarea.o(i.lv_textarea_set_one_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = lv_textarea_set_one_line &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_min_width
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[4f1]"></a>lv_textarea_set_password_bullet</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, lv_textarea.o(i.lv_textarea_set_password_bullet))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_textarea_set_password_bullet &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[4f2]"></a>lv_textarea_set_password_mode</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lv_textarea.o(i.lv_textarea_set_password_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = lv_textarea_set_password_mode &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[4f3]"></a>lv_textarea_set_placeholder_text</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lv_textarea.o(i.lv_textarea_set_placeholder_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_textarea_set_placeholder_text &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[4ba]"></a>lv_textarea_set_text</STRONG> (Thumb, 304 bytes, Stack size 88 bytes, lv_textarea.o(i.lv_textarea_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 932<LI>Call Chain = lv_textarea_set_text &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_clear_selection
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>

<P><STRONG><a name="[465]"></a>lv_theme_apply</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_theme.o(i.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[3d9]"></a>lv_theme_default_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(i.lv_theme_default_get))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[3dd]"></a>lv_theme_default_init</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, lv_theme_default.o(i.lv_theme_default_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_theme_default_init &rArr; lv_obj_report_style_change &rArr; report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[3d8]"></a>lv_theme_default_is_inited</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_theme_default.o(i.lv_theme_default_is_inited))
<BR><BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[33b]"></a>lv_theme_get_color_primary</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_theme.o(i.lv_theme_get_color_primary))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_theme_get_color_primary &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_part_begin_event_cb
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_constructor
</UL>

<P><STRONG><a name="[286]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(i.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[274]"></a>lv_tick_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_get))
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_constructor
</UL>

<P><STRONG><a name="[26c]"></a>lv_timer_create</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lv_timer.o(i.lv_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_system_init
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_home
</UL>

<P><STRONG><a name="[36f]"></a>lv_timer_del</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_timer.o(i.lv_timer_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game5_async_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game4_async_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_async_cb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_async_cb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_async_cb
</UL>

<P><STRONG><a name="[296]"></a>lv_timer_get_idle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_timer.o(i.lv_timer_get_idle))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[3d3]"></a>lv_timer_handler</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, lv_timer.o(i.lv_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_timer_handler &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
</UL>

<P><STRONG><a name="[26e]"></a>lv_timer_pause</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_timer.o(i.lv_timer_pause))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[3dc]"></a>lv_timer_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(i.lv_timer_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_timer_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[26d]"></a>lv_timer_resume</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_timer.o(i.lv_timer_resume))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[3ac]"></a>lv_timer_set_repeat_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_timer.o(i.lv_timer_set_repeat_count))
<BR><BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>

<P><STRONG><a name="[4f5]"></a>lv_tlsf_add_pool</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lv_tlsf.o(i.lv_tlsf_add_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_tlsf_add_pool &rArr; block_insert &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[4f6]"></a>lv_tlsf_check</STRONG> (Thumb, 506 bytes, Stack size 48 bytes, lv_tlsf.o(i.lv_tlsf_check), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>

<P><STRONG><a name="[4f7]"></a>lv_tlsf_create</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_create), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>

<P><STRONG><a name="[44e]"></a>lv_tlsf_create_with_pool</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_tlsf.o(i.lv_tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lv_tlsf_create_with_pool &rArr; lv_tlsf_add_pool &rArr; block_insert &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
</UL>

<P><STRONG><a name="[44c]"></a>lv_tlsf_free</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lv_tlsf.o(i.lv_tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[44f]"></a>lv_tlsf_get_pool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_tlsf.o(i.lv_tlsf_get_pool))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[44b]"></a>lv_tlsf_malloc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>

<P><STRONG><a name="[44d]"></a>lv_tlsf_realloc</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, lv_tlsf.o(i.lv_tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
</UL>

<P><STRONG><a name="[450]"></a>lv_tlsf_walk_pool</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lv_tlsf.o(i.lv_tlsf_walk_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_tlsf_walk_pool &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[392]"></a>lv_trigo_sin</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, lv_math.o(i.lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_transform
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_arc
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
</UL>

<P><STRONG><a name="[31c]"></a>lv_txt_get_size</STRONG> (Thumb, 398 bytes, Stack size 80 bytes, lv_txt.o(i.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_meter_event
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_checkbox_event
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[3e6]"></a>lv_txt_get_width</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, lv_txt.o(i.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[2cc]"></a>lv_vsnprintf</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_printf.o(i.lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_vsnprintf &rArr; _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[4f8]"></a>lvgl_demo_init</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lvgl_demo.o(i.lvgl_demo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lvgl_demo_init &rArr; W25QXX_Init &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_demo_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SDIO_SD_Init
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RNG_Init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2S2_Init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FATFS_Init
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Encoder_Start
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[107]"></a>music_task</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lvgl_demo.o(i.music_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = music_task &rArr; WAV_PlayFile &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_proc
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_volume
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_SetVolume
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_demo.o(i.lvgl_demo_init)
</UL>
<P><STRONG><a name="[506]"></a>on_bullet_hit_tank</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lvgl_demo.o(i.on_bullet_hit_tank), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[239]"></a>osKernelRunning</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[4fc]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23b]"></a>osKernelSysTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[23a]"></a>osMessageCreate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[23c]"></a>osMessageGet</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[19b]"></a>osMessagePut</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>

<P><STRONG><a name="[35d]"></a>osSemaphoreCreate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreCreate &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[35e]"></a>osSemaphoreDelete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osSemaphoreDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[35f]"></a>osSemaphoreRelease</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cmsis_os.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[361]"></a>osSemaphoreWait</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, cmsis_os.o(i.osSemaphoreWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[225]"></a>osThreadCreate</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osThreadCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[50e]"></a>prim_maze</STRONG> (Thumb, 666 bytes, Stack size 1112 bytes, lvgl_demo.o(i.prim_maze))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = prim_maze &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[51b]"></a>pvPortMalloc</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[537]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[53a]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[112]"></a>screen1_async_cb</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.screen1_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = screen1_async_cb &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.screen_1_ta_1_event_handler)
</UL>
<P><STRONG><a name="[ba]"></a>setup_scr_character</STRONG> (Thumb, 1406 bytes, Stack size 24 bytes, setup_scr_character.o(i.setup_scr_character))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = setup_scr_character &rArr; lv_img_set_pivot &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_recolor_opa
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_opa
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_clip_corner
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_character
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.home_btn_2_event_handler)
</UL>
<P><STRONG><a name="[ad]"></a>setup_scr_end</STRONG> (Thumb, 1748 bytes, Stack size 104 bytes, setup_scr_end.o(i.setup_scr_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 700<LI>Call Chain = setup_scr_end &rArr; lv_img_set_pivot &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_RTOS
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_recolor_opa
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_opa
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_clip_corner
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_end
</UL>
<BR>[Address Reference Count : 5]<UL><LI> events_init.o(i.game1_async_cb)
<LI> events_init.o(i.game2_async_cb)
<LI> events_init.o(i.game3_async_cb)
<LI> events_init.o(i.game4_async_cb)
<LI> events_init.o(i.game5_async_cb)
</UL>
<P><STRONG><a name="[88]"></a>setup_scr_game</STRONG> (Thumb, 1692 bytes, Stack size 24 bytes, setup_scr_game.o(i.setup_scr_game))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = setup_scr_game &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.character_btn_1_event_handler)
</UL>
<P><STRONG><a name="[b4]"></a>setup_scr_game1</STRONG> (Thumb, 2066 bytes, Stack size 24 bytes, setup_scr_game1.o(i.setup_scr_game1))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = setup_scr_game1 &rArr; prim_maze &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prim_maze
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_system_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_width
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_rounded
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_opa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_color
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> events_init.o(i.game_btn_2_event_handler)
<LI> events_init.o(i.pause_event_handler)
</UL>
<P><STRONG><a name="[b5]"></a>setup_scr_game2</STRONG> (Thumb, 2064 bytes, Stack size 24 bytes, setup_scr_game2.o(i.setup_scr_game2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = setup_scr_game2 &rArr; prim_maze &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prim_maze
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_system_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_width
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_rounded
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_opa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_color
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game_btn_3_event_handler)
</UL>
<P><STRONG><a name="[b6]"></a>setup_scr_game3</STRONG> (Thumb, 2064 bytes, Stack size 24 bytes, setup_scr_game3.o(i.setup_scr_game3))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = setup_scr_game3 &rArr; prim_maze &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prim_maze
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_system_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_width
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_rounded
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_opa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_color
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game_btn_4_event_handler)
</UL>
<P><STRONG><a name="[b7]"></a>setup_scr_game4</STRONG> (Thumb, 2064 bytes, Stack size 24 bytes, setup_scr_game4.o(i.setup_scr_game4))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = setup_scr_game4 &rArr; prim_maze &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prim_maze
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_system_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_width
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_rounded
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_opa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_color
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game_btn_5_event_handler)
</UL>
<P><STRONG><a name="[b8]"></a>setup_scr_game5</STRONG> (Thumb, 2064 bytes, Stack size 24 bytes, setup_scr_game5.o(i.setup_scr_game5))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168<LI>Call Chain = setup_scr_game5 &rArr; prim_maze &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_init
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prim_maze
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_system_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_width
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_rounded
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_opa
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_line_color
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_game5
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game_btn_6_event_handler)
</UL>
<P><STRONG><a name="[89]"></a>setup_scr_home</STRONG> (Thumb, 900 bytes, Stack size 48 bytes, setup_scr_home.o(i.setup_scr_home))
<BR><BR>[Stack]<UL><LI>Max Depth = 644<LI>Call Chain = setup_scr_home &rArr; lv_img_set_pivot &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_recolor_opa
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_opa
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_clip_corner
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_create
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_home
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 6]<UL><LI> events_init.o(i.character_btn_3_event_handler)
<LI> events_init.o(i.end_btn_2_event_handler)
<LI> events_init.o(i.game_btn_1_event_handler)
<LI> events_init.o(i.game_event_handler)
<LI> events_init.o(i.screen1_async_cb)
<LI> events_init.o(i.settings_btn_1_event_handler)
</UL>
<P><STRONG><a name="[ae]"></a>setup_scr_pause</STRONG> (Thumb, 1240 bytes, Stack size 16 bytes, setup_scr_pause.o(i.setup_scr_pause))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = setup_scr_pause &rArr; lv_img_set_pivot &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_recolor_opa
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_img_opa
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_clip_corner
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_pivot
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.game1_event_handler)
</UL>
<P><STRONG><a name="[523]"></a>setup_scr_screen_1</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, setup_scr_screen_1.o(i.setup_scr_screen_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 956<LI>Call Chain = setup_scr_screen_1 &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_RTOS
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_side
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_opa
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_color
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_grad_dir
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_placeholder_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_bullet
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_max_length
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_accepted_chars
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_create
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_screen_1
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ui
</UL>

<P><STRONG><a name="[bb]"></a>setup_scr_settings</STRONG> (Thumb, 2494 bytes, Stack size 56 bytes, setup_scr_settings.o(i.setup_scr_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = setup_scr_settings &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_RTOS
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_opa
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_line_space
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_letter_space
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_spread
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_opa
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_y
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_ofs_x
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_right
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_left
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;events_init_settings
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.home_btn_3_event_handler)
</UL>
<P><STRONG><a name="[3d1]"></a>setup_ui</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, gui_guider.o(i.setup_ui))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = setup_ui &rArr; setup_scr_screen_1 &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_load_scr
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_create
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_screen_1
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
</UL>

<P><STRONG><a name="[114]"></a>ta_event_cb</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, widgets_init.o(i.ta_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ta_event_cb &rArr; lv_keyboard_set_textarea &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_set_textarea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> setup_scr_screen_1.o(i.setup_scr_screen_1)
</UL>
<P><STRONG><a name="[522]"></a>tank_init</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, lvgl_demo.o(i.tank_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = tank_init &rArr; lv_img_set_src &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game5
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game3
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game2
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_scr_game1
</UL>

<P><STRONG><a name="[118]"></a>tank_move_timer_cb</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lvgl_demo.o(i.tank_move_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = tank_move_timer_cb &rArr; tank_update_xy &rArr; check_collision &rArr; rect_vs_rect &rArr; project_polygon &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_demo.o(i.tank_init)
</UL>
<P><STRONG><a name="[2f0]"></a>ui_load_scr_animation</STRONG> (Thumb, 72 bytes, Stack size 56 bytes, gui_guider.o(i.ui_load_scr_animation))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_scr_load_anim
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;settings_btn_1_event_handler
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pause_event_handler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_btn_3_event_handler
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;home_btn_2_event_handler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_event_handler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_6_event_handler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_5_event_handler
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_4_event_handler
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_3_event_handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_2_event_handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game_btn_1_event_handler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_event_handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_btn_2_event_handler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_btn_3_event_handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;character_btn_1_event_handler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;screen1_async_cb
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game5_async_cb
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game4_async_cb
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game3_async_cb
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game2_async_cb
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1_async_cb
</UL>

<P><STRONG><a name="[2d4]"></a>ulTaskNotifyTake</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasks.o(i.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
</UL>

<P><STRONG><a name="[503]"></a>update_volume</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, music.o(i.update_volume))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_task
</UL>

<P><STRONG><a name="[510]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[52e]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertos.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[515]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[539]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[512]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[511]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[514]"></a>vPortEnterCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[516]"></a>vPortExitCritical</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[517]"></a>vPortFree</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[531]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[52a]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[50c]"></a>vQueueDelete</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[241]"></a>vTaskDelay</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
</UL>

<P><STRONG><a name="[535]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[51a]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[1a3]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, tasks.o(i.vTaskNotifyGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskNotifyGiveFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>

<P><STRONG><a name="[52c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[52d]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[508]"></a>vTaskStartScheduler</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[51c]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[16f]"></a>vTaskSwitchContext</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[10a]"></a>w25qxx_task</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lvgl_demo.o(i.w25qxx_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = w25qxx_task &rArr; W25QXX_Write &rArr; W25QXX_Wait_Busy &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_demo.o(i.lvgl_demo_init)
</UL>
<P><STRONG><a name="[504]"></a>wav_proc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, music.o(i.wav_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = wav_proc &rArr; FillHalfBufferLoop &rArr; f_read &rArr; validate &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FillHalfBufferLoop
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_task
</UL>

<P><STRONG><a name="[52f]"></a>xPortStartScheduler</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[3cd]"></a>xQueueGenericCreate</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_demo_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_task
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_demo_task
</UL>

<P><STRONG><a name="[50a]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
</UL>

<P><STRONG><a name="[247]"></a>xQueueGenericSend</STRONG> (Thumb, 464 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreCreate
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_RTOS
</UL>

<P><STRONG><a name="[213]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_RTOSISR
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[1b8]"></a>xQueueGiveFromISR</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxHalfCpltCallback
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxCpltCallback
</UL>

<P><STRONG><a name="[4ff]"></a>xQueueReceive</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouse_read
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w25qxx_task
</UL>

<P><STRONG><a name="[50b]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[502]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 406 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreWait
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;music_task
</UL>

<P><STRONG><a name="[536]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4f9]"></a>xTaskCreate</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lvgl_demo_init
</UL>

<P><STRONG><a name="[50d]"></a>xTaskCreateStatic</STRONG> (Thumb, 222 bytes, Stack size 80 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[507]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[2d3]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_task
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>

<P><STRONG><a name="[509]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[242]"></a>xTaskIncrementTick</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[534]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[538]"></a>xTaskPriorityInherit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[519]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[51d]"></a>xTaskResumeAll</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[6a]"></a>ADC_DMAConvCplt</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ADC_DMAConvCplt &rArr; HAL_ADC_ConvCpltCallback &rArr; HAL_ADC_Start_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[6c]"></a>ADC_DMAError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[6b]"></a>ADC_DMAHalfConvCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_adc.o(i.ADC_DMAHalfConvCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMAHalfConvCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConvHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_adc.o(i.HAL_ADC_Start_DMA)
</UL>
<P><STRONG><a name="[71]"></a>I2S_DMAError</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_i2s.o(i.I2S_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2S_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
</UL>
<P><STRONG><a name="[70]"></a>I2S_DMATxCplt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f4xx_hal_i2s.o(i.I2S_DMATxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2S_DMATxCplt &rArr; HAL_I2S_TxCpltCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
</UL>
<P><STRONG><a name="[6f]"></a>I2S_DMATxHalfCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_i2s.o(i.I2S_DMATxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2S_DMATxHalfCplt &rArr; HAL_I2S_TxHalfCpltCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2s.o(i.HAL_I2S_Transmit_DMA)
</UL>
<P><STRONG><a name="[6d]"></a>I2S_IRQHandler</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, stm32f4xx_hal_i2s.o(i.I2S_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2S_IRQHandler &rArr; HAL_I2S_TxCpltCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_RxCpltCallback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_ErrorCallback
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2S_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_i2s.o(i.HAL_I2S_Init)
</UL>
<P><STRONG><a name="[75]"></a>SD_DMAError</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_DMAError &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
<LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[74]"></a>SD_DMAReceiveCplt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SD_DMAReceiveCplt &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_ReadBlocks_DMA)
</UL>
<P><STRONG><a name="[73]"></a>SD_DMARxAbort</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMARxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_DMARxAbort &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[76]"></a>SD_DMATransmitCplt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_sd.o(i.SD_DMATransmitCplt))
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_WriteBlocks_DMA)
</UL>
<P><STRONG><a name="[72]"></a>SD_DMATxAbort</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_sd.o(i.SD_DMATxAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SD_DMATxAbort &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_AbortCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_sd.o(i.HAL_SD_IRQHandler)
</UL>
<P><STRONG><a name="[1ce]"></a>SD_FindSCR</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, stm32f4xx_hal_sd.o(i.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SD_FindSCR
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadFIFO
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[77]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[7a]"></a>SPI_DMAError</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[78]"></a>SPI_DMAHalfTransmitCplt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_hal_spi.o(i.SPI_DMAHalfTransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DMAHalfTransmitCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[79]"></a>SPI_DMATransmitCplt</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_DMATransmitCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_DMATransmitCplt &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxCpltCallback
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_spi.o(i.HAL_SPI_Transmit_DMA)
</UL>
<P><STRONG><a name="[1f2]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMATransmitCplt
</UL>

<P><STRONG><a name="[240]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
</UL>

<P><STRONG><a name="[7b]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[205]"></a>UART_Receive_IT</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[20b]"></a>UART_SetConfig</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[215]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[518]"></a>prvUnlockQueue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[50f]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[513]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[119]"></a>prvIdleTask</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[110]"></a>prvTaskExitError</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[87]"></a>bullet_update_cb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lvgl_demo.o(i.bullet_update_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = bullet_update_cb &rArr; bullet_update_one &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lvgl_demo.o(i.bullet_system_init)
</UL>
<P><STRONG><a name="[2eb]"></a>bullet_update_one</STRONG> (Thumb, 2254 bytes, Stack size 360 bytes, lvgl_demo.o(i.bullet_update_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = bullet_update_one &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_polygon
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_cb
</UL>

<P><STRONG><a name="[2f1]"></a>check_collision</STRONG> (Thumb, 922 bytes, Stack size 216 bytes, lvgl_demo.o(i.check_collision))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = check_collision &rArr; rect_vs_rect &rArr; project_polygon &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_vs_rect
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tank_corners
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_update_xy
</UL>

<P><STRONG><a name="[2f2]"></a>get_tank_corners</STRONG> (Thumb, 328 bytes, Stack size 136 bytes, lvgl_demo.o(i.get_tank_corners))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = get_tank_corners &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
</UL>

<P><STRONG><a name="[2ee]"></a>project_polygon</STRONG> (Thumb, 318 bytes, Stack size 64 bytes, lvgl_demo.o(i.project_polygon))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = project_polygon &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rect_vs_rect
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_update_one
</UL>

<P><STRONG><a name="[2f3]"></a>rect_vs_rect</STRONG> (Thumb, 336 bytes, Stack size 264 bytes, lvgl_demo.o(i.rect_vs_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rect_vs_rect &rArr; project_polygon &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;project_polygon
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
</UL>

<P><STRONG><a name="[528]"></a>tank_update_xy</STRONG> (Thumb, 2084 bytes, Stack size 128 bytes, lvgl_demo.o(i.tank_update_xy))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = tank_update_xy &rArr; check_collision &rArr; rect_vs_rect &rArr; project_polygon &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_collision
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_create_ex
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tank_move_timer_cb
</UL>

<P><STRONG><a name="[1a0]"></a>FillHalfBufferLoop</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, music.o(i.FillHalfBufferLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FillHalfBufferLoop &rArr; f_read &rArr; validate &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wav_proc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WAV_PlayFile
</UL>

<P><STRONG><a name="[f0]"></a>disp_flush</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_port_disp.o(i.disp_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = disp_flush &rArr; LCD_FillBlock &rArr; LCD_SetWindow &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FillBlock
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(i.lv_port_disp_init)
</UL>
<P><STRONG><a name="[f1]"></a>mouse_read</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, lv_port_indev.o(i.mouse_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mouse_read &rArr; xQueueReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_10
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(i.lv_port_indev_init)
</UL>
<P><STRONG><a name="[f7]"></a>opa_scale_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_disp.o(i.opa_scale_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = opa_scale_anim &rArr; lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(i.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[f4]"></a>scr_anim_ready</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_disp.o(i.scr_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = scr_anim_ready &rArr; lv_obj_remove_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(i.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[f3]"></a>scr_load_anim_start</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_disp.o(i.scr_load_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = scr_load_anim_start &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(i.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[f5]"></a>set_x_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_disp.o(i.set_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = set_x_anim &rArr; lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(i.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[f6]"></a>set_y_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_disp.o(i.set_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = set_y_anim &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_disp.o(i.lv_scr_load_anim)
</UL>
<P><STRONG><a name="[347]"></a>event_send_core</STRONG> (Thumb, 406 bytes, Stack size 16 bytes, lv_event.o(i.event_send_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>

<P><STRONG><a name="[36b]"></a>focus_next_core</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, lv_group.o(i.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[36d]"></a>get_indev</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_group.o(i.get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_indev
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[382]"></a>indev_proc_press</STRONG> (Thumb, 1170 bytes, Stack size 24 bytes, lv_indev.o(i.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = indev_proc_press &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[388]"></a>indev_proc_release</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, lv_indev.o(i.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[2af]"></a>elastic_diff</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, lv_indev_scroll.o(i.elastic_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = elastic_diff &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[2b1]"></a>find_snap_point_x</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, lv_indev_scroll.o(i.find_snap_point_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = find_snap_point_x &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[2b0]"></a>find_snap_point_y</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, lv_indev_scroll.o(i.find_snap_point_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = find_snap_point_y &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[11b]"></a>lv_obj_constructor</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_obj_constructor &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>lv_obj_destructor</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lv_obj_destructor &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_mark_deleted
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.constdata)
</UL>
<P><STRONG><a name="[46d]"></a>lv_obj_draw</STRONG> (Thumb, 1178 bytes, Stack size 232 bytes, lv_obj.o(i.lv_obj_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = lv_obj_draw &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[11d]"></a>lv_obj_event</STRONG> (Thumb, 1086 bytes, Stack size 40 bytes, lv_obj.o(i.lv_obj_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = lv_obj_event &rArr; lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_current_target
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_mode
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.constdata)
</UL>
<P><STRONG><a name="[459]"></a>lv_obj_set_state</STRONG> (Thumb, 610 bytes, Stack size 104 bytes, lv_obj.o(i.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[47a]"></a>obj_valid_child</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, lv_obj.o(i.obj_valid_child))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = obj_valid_child &rArr;  obj_valid_child (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_valid_child
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_valid
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_valid_child
</UL>

<P><STRONG><a name="[466]"></a>lv_obj_construct</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_class.o(i.lv_obj_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_construct &rArr;  lv_obj_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[39b]"></a>layout_update_core</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lv_obj_pos.o(i.layout_update_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 524 + In Cycle
<LI>Call Chain = layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
</UL>

<P><STRONG><a name="[4aa]"></a>transform_point</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, lv_obj_pos.o(i.transform_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = transform_point &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_transform_point
</UL>

<P><STRONG><a name="[ee]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = scroll_anim_ready_cb &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[486]"></a>scroll_area_into_view</STRONG> (Thumb, 716 bytes, Stack size 72 bytes, lv_obj_scroll.o(i.scroll_area_into_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = scroll_area_into_view &rArr; lv_obj_scroll_by &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[ec]"></a>scroll_x_anim</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.scroll_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = scroll_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(i.lv_obj_scroll_to)
<LI> lv_obj_scroll.o(i.lv_obj_scroll_to_x)
<LI> lv_obj_scroll.o(i.scroll_area_into_view)
<LI> lv_obj_scroll.o(i.lv_obj_get_scroll_end)
</UL>
<P><STRONG><a name="[ed]"></a>scroll_y_anim</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.scroll_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = scroll_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(i.lv_obj_scroll_to)
<LI> lv_obj_scroll.o(i.lv_obj_scroll_to_y)
<LI> lv_obj_scroll.o(i.scroll_area_into_view)
<LI> lv_obj_scroll.o(i.lv_obj_get_scroll_end)
</UL>
<P><STRONG><a name="[378]"></a>get_local_style</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, lv_obj_style.o(i.get_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_local_style &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>

<P><STRONG><a name="[2bf]"></a>get_trans_style</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lv_obj_style.o(i.get_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = get_trans_style &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[47f]"></a>refresh_children_style</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_obj_style.o(i.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
</UL>

<P><STRONG><a name="[484]"></a>report_style_change_core</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_obj_style.o(i.report_style_change_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + In Cycle
<LI>Call Chain = report_style_change_core &rArr;  report_style_change_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_report_style_change
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_style_change_core
</UL>

<P><STRONG><a name="[83]"></a>trans_anim_cb</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, lv_obj_style.o(i.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(i._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[85]"></a>trans_anim_ready_cb</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lv_obj_style.o(i.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = trans_anim_ready_cb &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(i._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[84]"></a>trans_anim_start_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj_style.o(i.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = trans_anim_start_cb &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(i._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[45b]"></a>trans_del</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, lv_obj_style.o(i.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[469]"></a>obj_del_core</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, lv_obj_tree.o(i.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clean
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[32b]"></a>draw_buf_flush</STRONG> (Thumb, 1422 bytes, Stack size 152 bytes, lv_refr.o(i.draw_buf_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = draw_buf_flush &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[4ab]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>

<P><STRONG><a name="[283]"></a>refr_area_part</STRONG> (Thumb, 428 bytes, Stack size 104 bytes, lv_refr.o(i.refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = refr_area_part &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[47e]"></a>refr_obj</STRONG> (Thumb, 1200 bytes, Stack size 144 bytes, lv_refr.o(i.refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = refr_obj &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_layer_type
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_transformed_area
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_destroy
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_create
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_blend
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_layer_adjust
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_redraw
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj_and_children
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>

<P><STRONG><a name="[51e]"></a>refr_obj_and_children</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lv_refr.o(i.refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = refr_obj_and_children &rArr; refr_obj &rArr;  refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_area_part
</UL>

<P><STRONG><a name="[2d5]"></a>apply_theme</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_theme.o(i.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[c8]"></a>color_blend_true_color_additive</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lv_draw_sw_blend.o(i.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_blend_true_color_additive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic)
</UL>
<P><STRONG><a name="[ca]"></a>color_blend_true_color_multiply</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, lv_draw_sw_blend.o(i.color_blend_true_color_multiply))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_blend_true_color_multiply
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic)
</UL>
<P><STRONG><a name="[c9]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, lv_draw_sw_blend.o(i.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = color_blend_true_color_subtractive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_blend.o(i.lv_draw_sw_blend_basic)
</UL>
<P><STRONG><a name="[362]"></a>fill_normal</STRONG> (Thumb, 2000 bytes, Stack size 128 bytes, lv_draw_sw_blend.o(i.fill_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = fill_normal &rArr; lv_color_fill
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[3ef]"></a>map_normal</STRONG> (Thumb, 2024 bytes, Stack size 128 bytes, lv_draw_sw_blend.o(i.map_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = map_normal &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend_basic
</UL>

<P><STRONG><a name="[dd]"></a>find_item</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(i.find_item))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_gradient.o(i.lv_gradient_get)
</UL>
<P><STRONG><a name="[de]"></a>find_oldest_item_life</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_sw_gradient.o(i.find_oldest_item_life))
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_gradient.o(i.lv_gradient_get)
</UL>
<P><STRONG><a name="[414]"></a>iterate_cache</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lv_draw_sw_gradient.o(i.iterate_cache))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = iterate_cache
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
</UL>

<P><STRONG><a name="[df]"></a>kill_oldest_item</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, lv_draw_sw_gradient.o(i.kill_oldest_item))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = kill_oldest_item &rArr; lv_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_sw_gradient.o(i.lv_gradient_get)
</UL>
<P><STRONG><a name="[30c]"></a>draw_bg</STRONG> (Thumb, 992 bytes, Stack size 184 bytes, lv_draw_sw_rect.o(i.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = draw_bg &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_get
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_gradient_cleanup
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg
</UL>

<P><STRONG><a name="[319]"></a>draw_bg_img</STRONG> (Thumb, 532 bytes, Stack size 96 bytes, lv_draw_sw_rect.o(i.draw_bg_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = draw_bg_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_bg
</UL>

<P><STRONG><a name="[33c]"></a>draw_shadow</STRONG> (Thumb, 3592 bytes, Stack size 248 bytes, lv_draw_sw_rect.o(i.draw_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = draw_shadow &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_blend
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_sw_rect
</UL>

<P><STRONG><a name="[33e]"></a>shadow_blur_corner</STRONG> (Thumb, 428 bytes, Stack size 72 bytes, lv_draw_sw_rect.o(i.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = shadow_blur_corner &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[c5]"></a>lv_draw_mask_angle</STRONG> (Thumb, 782 bytes, Stack size 56 bytes, lv_draw_mask.o(i.lv_draw_mask_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = lv_draw_mask_angle &rArr; lv_draw_mask_line &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_angle_init)
</UL>
<P><STRONG><a name="[c6]"></a>lv_draw_mask_line</STRONG> (Thumb, 1244 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_draw_mask_line &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[c7]"></a>lv_draw_mask_radius</STRONG> (Thumb, 728 bytes, Stack size 40 bytes, lv_draw_mask.o(i.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_draw_mask_radius &rArr; lv_memset_00
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[366]"></a>find_track_end</STRONG> (Thumb, 620 bytes, Stack size 64 bytes, lv_flex.o(i.find_track_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = find_track_end &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[da]"></a>flex_update</STRONG> (Thumb, 1954 bytes, Stack size 216 bytes, lv_flex.o(i.flex_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = flex_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.lv_flex_init)
</UL>
<P><STRONG><a name="[ac]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.flex_update)
</UL>
<P><STRONG><a name="[ab]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.flex_update)
</UL>
<P><STRONG><a name="[369]"></a>place_content</STRONG> (Thumb, 140 bytes, Stack size 12 bytes, lv_flex.o(i.place_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = place_content
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[37d]"></a>grid_align</STRONG> (Thumb, 406 bytes, Stack size 36 bytes, lv_grid.o(i.grid_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = grid_align
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[e0]"></a>grid_update</STRONG> (Thumb, 2130 bytes, Stack size 104 bytes, lv_grid.o(i.grid_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = grid_update &rArr; lv_obj_refr_size &rArr; lv_obj_scroll_to &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(i.lv_grid_init)
</UL>
<P><STRONG><a name="[116]"></a>dark_color_filter_cb</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_theme_default.o(i.dark_color_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dark_color_filter_cb &rArr; lv_color_darken
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(i.style_init)
</UL>
<P><STRONG><a name="[117]"></a>grey_filter_cb</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, lv_theme_default.o(i.grey_filter_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = grey_filter_cb &rArr; lv_palette_lighten &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(i.style_init)
</UL>
<P><STRONG><a name="[3d4]"></a>lv_disp_dpx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_theme_default.o(i.lv_disp_dpx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_disp_dpx
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;style_init
</UL>

<P><STRONG><a name="[4f4]"></a>style_init</STRONG> (Thumb, 7016 bytes, Stack size 40 bytes, lv_theme_default.o(i.style_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = style_init &rArr; lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_width
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transform_height
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_line_space
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_align
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_spread
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_opa
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_ofs_y
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_row
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_column
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_width
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_pad
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_opa
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_outline_color
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_width
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_max_height
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_height
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_opa
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_color_filter_dsc
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_clip_corner
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_post
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_opa
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_img_src
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_grad_color
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_rounded
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_dpx
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_top
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_right
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_left
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_pad_bottom
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_width
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_arc_color
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_anim_time
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_lighten
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_darken
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_default_init
</UL>

<P><STRONG><a name="[104]"></a>theme_apply</STRONG> (Thumb, 4188 bytes, Stack size 48 bytes, lv_theme_default.o(i.theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = theme_apply &rArr; lv_obj_add_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_check_type
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_theme_default.o(i.lv_theme_default_init)
</UL>
<P><STRONG><a name="[c2]"></a>draw_part_begin_event_cb</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lv_calendar.o(i.draw_part_begin_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = draw_part_begin_event_cb &rArr; lv_theme_get_color_primary &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_has_btn_ctrl
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(i.lv_calendar_constructor)
</UL>
<P><STRONG><a name="[37e]"></a>highlight_update</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, lv_calendar.o(i.highlight_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_constructor
</UL>

<P><STRONG><a name="[11e]"></a>lv_calendar_constructor</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, lv_calendar.o(i.lv_calendar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lv_calendar_constructor &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;highlight_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>month_event_cb</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lv_calendar_header_arrow.o(i.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = month_event_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(i.my_constructor)
</UL>
<P><STRONG><a name="[11f]"></a>my_constructor</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, lv_calendar_header_arrow.o(i.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = my_constructor &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_align
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>value_changed_event_cb</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_calendar_header_arrow.o(i.value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = value_changed_event_cb &rArr; lv_label_set_text_fmt &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_arrow.o(i.my_constructor)
</UL>
<P><STRONG><a name="[10e]"></a>month_event_cb</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(i.month_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = month_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(i.my_constructor)
</UL>
<P><STRONG><a name="[120]"></a>my_constructor</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lv_calendar_header_dropdown.o(i.my_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = my_constructor &rArr; lv_dropdown_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_options
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>value_changed_event_cb</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lv_calendar_header_dropdown.o(i.value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = value_changed_event_cb &rArr; lv_dropdown_set_selected &rArr; position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_options
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(i.my_constructor)
</UL>
<P><STRONG><a name="[10d]"></a>year_event_cb</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, lv_calendar_header_dropdown.o(i.year_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = year_event_cb &rArr; lv_calendar_set_showed_date &rArr; highlight_update &rArr; lv_btnmatrix_set_btn_ctrl &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_set_showed_date
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_calendar_get_showed_date
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_selected
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_get_options
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_calendar_header_dropdown.o(i.my_constructor)
</UL>
<P><STRONG><a name="[33f]"></a>draw_x_ticks</STRONG> (Thumb, 884 bytes, Stack size 264 bytes, lv_chart.o(i.draw_x_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = draw_x_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[345]"></a>draw_y_ticks</STRONG> (Thumb, 760 bytes, Stack size 272 bytes, lv_chart.o(i.draw_y_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[397]"></a>invalidate_point</STRONG> (Thumb, 414 bytes, Stack size 40 bytes, lv_chart.o(i.invalidate_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = invalidate_point &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_event
</UL>

<P><STRONG><a name="[121]"></a>lv_chart_constructor</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, lv_chart.o(i.lv_chart_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_chart_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>lv_chart_destructor</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lv_chart.o(i.lv_chart_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_chart_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>lv_chart_event</STRONG> (Thumb, 4558 bytes, Stack size 312 bytes, lv_chart.o(i.lv_chart_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = lv_chart_event &rArr; draw_y_ticks &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_chart_get_point_pos_by_id
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_point
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_y_ticks
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_x_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_chart.o(.constdata)
</UL>
<P><STRONG><a name="[3c8]"></a>fast_hsv2rgb</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, lv_colorwheel.o(i.fast_hsv2rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fast_hsv2rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
</UL>

<P><STRONG><a name="[124]"></a>lv_colorwheel_constructor</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lv_colorwheel.o(i.lv_colorwheel_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_colorwheel_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>lv_colorwheel_event</STRONG> (Thumb, 2156 bytes, Stack size 192 bytes, lv_colorwheel.o(i.lv_colorwheel_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = lv_colorwheel_event &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_wait_release
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_hsv_to_rgb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_set_hsv
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_knob_pos
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_hsv2rgb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_colorwheel.o(.constdata)
</UL>
<P><STRONG><a name="[3c5]"></a>refr_knob_pos</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, lv_colorwheel.o(i.refr_knob_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = refr_knob_pos &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_set_hsv
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_event
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_colorwheel_constructor
</UL>

<P><STRONG><a name="[126]"></a>lv_keyboard_constructor</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lv_keyboard.o(i.lv_keyboard_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lv_keyboard_constructor &rArr; lv_keyboard_update_ctrl_map &rArr; lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_base_dir
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_update_ctrl_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_keyboard.o(.constdata)
</UL>
<P><STRONG><a name="[431]"></a>lv_keyboard_update_ctrl_map</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lv_keyboard.o(i.lv_keyboard_update_ctrl_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = lv_keyboard_update_ctrl_map &rArr; lv_btnmatrix_set_ctrl_map &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_ctrl_map
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_def_event_cb
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_keyboard_constructor
</UL>

<P><STRONG><a name="[447]"></a>lv_color_brightness</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lv_led.o(i.lv_color_brightness))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
</UL>

<P><STRONG><a name="[448]"></a>lv_color_mix</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, lv_led.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_led_event
</UL>

<P><STRONG><a name="[127]"></a>lv_led_constructor</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_led.o(i.lv_led_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_led_constructor &rArr; lv_theme_get_color_primary &rArr; lv_obj_get_disp &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_color_primary
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>lv_led_event</STRONG> (Thumb, 802 bytes, Stack size 160 bytes, lv_led.o(i.lv_led_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lv_led_event &rArr; lv_obj_init_draw_rect_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_brightness
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_led.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>lv_menu_back_event_cb</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, lv_menu.o(i.lv_menu_back_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = lv_menu_back_event_cb &rArr; lv_menu_set_page &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_menu_set_page
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(i.lv_menu_constructor)
</UL>
<P><STRONG><a name="[129]"></a>lv_menu_constructor</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, lv_menu.o(i.lv_menu_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = lv_menu_constructor &rArr; lv_img_set_src &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_layout
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btn_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>lv_menu_cont_constructor</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_menu.o(i.lv_menu_cont_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_menu_cont_constructor &rArr; lv_obj_set_flex_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>lv_menu_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_menu.o(i.lv_menu_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_menu_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>lv_menu_page_constructor</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_menu.o(i.lv_menu_page_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_menu_page_constructor &rArr; lv_obj_set_flex_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_parent
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>lv_menu_page_destructor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_menu.o(i.lv_menu_page_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_menu_page_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>lv_menu_section_constructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_menu.o(i.lv_menu_section_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = lv_menu_section_constructor &rArr; lv_obj_set_flex_flow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>lv_menu_value_changed_event_cb</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lv_menu.o(i.lv_menu_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = lv_menu_value_changed_event_cb &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_menu.o(i.lv_menu_constructor)
</UL>
<P><STRONG><a name="[12f]"></a>lv_meter_constructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_meter.o(i.lv_meter_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_meter_constructor
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>lv_meter_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_meter.o(i.lv_meter_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_meter_destructor &rArr; _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>lv_meter_event</STRONG> (Thumb, 2108 bytes, Stack size 480 bytes, lv_meter.o(i.lv_meter_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = lv_meter_event &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_transform
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa_recursive
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_meter.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>lv_spinbox_constructor</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lv_spinbox.o(i.lv_spinbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1004<LI>Call Chain = lv_spinbox_constructor &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_one_line
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_click_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>lv_spinbox_event</STRONG> (Thumb, 748 bytes, Stack size 24 bytes, lv_spinbox.o(i.lv_spinbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1020<LI>Call Chain = lv_spinbox_event &rArr; lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_cursor_left
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_updatevalue
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_pow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinbox.o(.constdata)
</UL>
<P><STRONG><a name="[4b8]"></a>lv_spinbox_updatevalue</STRONG> (Thumb, 346 bytes, Stack size 64 bytes, lv_spinbox.o(i.lv_spinbox_updatevalue))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = lv_spinbox_updatevalue &rArr; lv_textarea_set_text &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_event
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_spinbox_constructor
</UL>

<P><STRONG><a name="[f9]"></a>arc_anim_end_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_spinner.o(i.arc_anim_end_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = arc_anim_end_angle &rArr; lv_arc_set_end_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(i.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[fb]"></a>arc_anim_start_angle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_spinner.o(i.arc_anim_start_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = arc_anim_start_angle &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(i.lv_spinner_constructor)
</UL>
<P><STRONG><a name="[134]"></a>lv_spinner_constructor</STRONG> (Thumb, 110 bytes, Stack size 80 bytes, lv_spinner.o(i.lv_spinner_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_spinner_constructor &rArr; lv_arc_set_bg_angles &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_rotation
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_spinner.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>btns_value_changed_event_cb</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lv_tabview.o(i.btns_value_changed_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = btns_value_changed_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_get_selected_btn
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(i.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[100]"></a>cont_scroll_end_event_cb</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lv_tabview.o(i.cont_scroll_end_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 604<LI>Call Chain = cont_scroll_end_event_cb &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(i.lv_tabview_constructor)
</UL>
<P><STRONG><a name="[135]"></a>lv_tabview_constructor</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, lv_tabview.o(i.lv_tabview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_tabview_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_create
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>lv_tabview_destructor</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_tabview.o(i.lv_tabview_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_tabview_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>lv_tabview_event</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_tabview.o(i.lv_tabview_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = lv_tabview_event &rArr; lv_tabview_set_act &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tabview_set_act
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tabview.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>lv_tileview_constructor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_tileview.o(i.lv_tileview_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = lv_tileview_constructor &rArr; lv_obj_set_size &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_y
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_snap_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>lv_tileview_tile_constructor</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lv_tileview.o(i.lv_tileview_tile_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = lv_tileview_tile_constructor &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>tileview_event_cb</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, lv_tileview.o(i.tileview_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tileview_event_cb &rArr; lv_obj_set_scroll_dir &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scroll_dir
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_end
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tileview.o(i.lv_tileview_constructor)
</UL>
<P><STRONG><a name="[13a]"></a>lv_win_constructor</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_win.o(i.lv_win_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lv_win_constructor &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_grow
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_win.o(.constdata)
</UL>
<P><STRONG><a name="[374]"></a>get_glyph_dsc_id</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[db]"></a>kern_pair_16_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[dc]"></a>kern_pair_8_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt)
</UL>
<P><STRONG><a name="[b9]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[7e]"></a>anim_timer</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, lv_anim.o(i.anim_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = anim_timer &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(i._lv_anim_core_init)
</UL>
<P><STRONG><a name="[bf]"></a>lv_async_timer_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_async.o(i.lv_async_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_async_timer_cb &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_async.o(i.lv_async_call)
</UL>
<P><STRONG><a name="[e9]"></a>lv_mem_walker</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_walker))
<BR>[Address Reference Count : 1]<UL><LI> lv_mem.o(i.lv_mem_monitor)
</UL>
<P><STRONG><a name="[2d1]"></a>_ntoa_format</STRONG> (Thumb, 366 bytes, Stack size 48 bytes, lv_printf.o(i._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[f8]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_printf.o(i._out_buffer))
<BR>[Address Reference Count : 2]<UL><LI> lv_printf.o(i.lv_snprintf)
<LI> lv_printf.o(i.lv_vsnprintf)
</UL>
<P><STRONG><a name="[86]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_printf.o(i._out_null))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(i._vsnprintf)
</UL>
<P><STRONG><a name="[2d0]"></a>_vsnprintf</STRONG> (Thumb, 1882 bytes, Stack size 280 bytes, lv_printf.o(i._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = _vsnprintf &rArr;  _vsnprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[fc]"></a>lv_style_set_prop_helper</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_set_prop_helper))
<BR>[Address Reference Count : 1]<UL><LI> lv_style.o(i.lv_style_set_prop)
</UL>
<P><STRONG><a name="[4da]"></a>lv_style_set_prop_internal</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, lv_style.o(i.lv_style_set_prop_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_style_set_prop_internal &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>

<P><STRONG><a name="[2d8]"></a>block_insert</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lv_tlsf.o(i.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = block_insert &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[2d9]"></a>block_locate_free</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, lv_tlsf.o(i.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = block_locate_free &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[2db]"></a>block_merge_next</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, lv_tlsf.o(i.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>

<P><STRONG><a name="[2dc]"></a>block_next</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_tlsf.o(i.block_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[2dd]"></a>block_prepare_used</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lv_tlsf.o(i.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[2de]"></a>block_split</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lv_tlsf.o(i.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[106]"></a>default_walker</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lv_tlsf.o(i.default_walker))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = default_walker &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_tlsf.o(i.lv_tlsf_walk_pool)
</UL>
<P><STRONG><a name="[2da]"></a>remove_free_block</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lv_tlsf.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[6]"></a>lv_txt_unicode_to_utf8</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_unicode_to_utf8))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>lv_txt_utf8_next</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, lv_txt.o(i.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>lv_txt_utf8_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[391]"></a>get_angle</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lv_arc.o(i.get_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
</UL>

<P><STRONG><a name="[373]"></a>get_center</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lv_arc.o(i.get_center))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = get_center &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_arc_area
</UL>

<P><STRONG><a name="[38d]"></a>inv_arc_area</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, lv_arc.o(i.inv_arc_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_visible
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_get_area
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
</UL>

<P><STRONG><a name="[390]"></a>inv_knob_area</STRONG> (Thumb, 212 bytes, Stack size 48 bytes, lv_arc.o(i.inv_knob_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = inv_knob_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>

<P><STRONG><a name="[393]"></a>knob_get_extra_size</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, lv_arc.o(i.knob_get_extra_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = knob_get_extra_size &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_knob_area
</UL>

<P><STRONG><a name="[13d]"></a>lv_arc_constructor</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, lv_arc.o(i.lv_arc_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_arc_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>lv_arc_event</STRONG> (Thumb, 2200 bytes, Stack size 232 bytes, lv_arc.o(i.lv_arc_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = lv_arc_event &rArr; value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_arc_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc_dsc_init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_arc
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_atan2
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;value_update
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knob_get_extra_size
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_center
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_angle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_arc.o(.constdata)
</UL>
<P><STRONG><a name="[3a7]"></a>value_update</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, lv_arc.o(i.value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = value_update &rArr; lv_arc_set_start_angle &rArr; inv_arc_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_start_angle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_end_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_set_bg_angles
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_arc_event
</UL>

<P><STRONG><a name="[333]"></a>draw_indic</STRONG> (Thumb, 1332 bytes, Stack size 344 bytes, lv_bar.o(i.draw_indic))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = draw_indic &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[8b]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(i.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.draw_indic)
</UL>
<P><STRONG><a name="[8a]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(i.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.draw_indic)
</UL>
<P><STRONG><a name="[c0]"></a>lv_bar_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_bar.o(i.lv_bar_set_start_value)
<LI> lv_bar.o(i.lv_bar_set_value)
</UL>
<P><STRONG><a name="[c1]"></a>lv_bar_anim_ready</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_bar.o(i.lv_bar_set_start_value)
<LI> lv_bar.o(i.lv_bar_set_value)
</UL>
<P><STRONG><a name="[13f]"></a>lv_bar_constructor</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lv_bar.o(i.lv_bar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_bar_constructor &rArr; lv_bar_set_value &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>lv_bar_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_bar.o(i.lv_bar_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_bar_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>lv_bar_event</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lv_bar.o(i.lv_bar_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = lv_bar_event &rArr; draw_indic &rArr; lv_draw_mask_radius_init &rArr; lv_mem_buf_get &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>lv_btn_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_btn.o(i.lv_btn_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_btn_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btn.o(.constdata)
</UL>
<P><STRONG><a name="[371]"></a>get_button_from_point</STRONG> (Thumb, 446 bytes, Stack size 120 bytes, lv_btnmatrix.o(i.get_button_from_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = get_button_from_point &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[394]"></a>invalidate_button_area</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, lv_btnmatrix.o(i.invalidate_button_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = invalidate_button_area &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_selected_btn
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl_all
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_clear_btn_ctrl_all
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_one_checked
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_event
</UL>

<P><STRONG><a name="[143]"></a>lv_btnmatrix_constructor</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_btnmatrix.o(i.lv_btnmatrix_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_btnmatrix_constructor &rArr; lv_btnmatrix_set_map &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>lv_btnmatrix_destructor</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_btnmatrix.o(i.lv_btnmatrix_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_btnmatrix_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>lv_btnmatrix_event</STRONG> (Thumb, 2664 bytes, Stack size 384 bytes, lv_btnmatrix.o(i.lv_btnmatrix_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = lv_btnmatrix_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset_long_press
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_map
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_btnmatrix_set_btn_ctrl
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_button_area
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_button_from_point
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_btnmatrix.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>lv_checkbox_constructor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_checkbox.o(i.lv_checkbox_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_checkbox_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>lv_checkbox_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_checkbox.o(i.lv_checkbox_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_checkbox_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>lv_checkbox_event</STRONG> (Thumb, 754 bytes, Stack size 288 bytes, lv_checkbox.o(i.lv_checkbox_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = lv_checkbox_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_checkbox.o(.constdata)
</UL>
<P><STRONG><a name="[323]"></a>draw_box</STRONG> (Thumb, 184 bytes, Stack size 120 bytes, lv_dropdown.o(i.draw_box))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = draw_box &rArr; lv_obj_init_draw_rect_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[328]"></a>draw_box_label</STRONG> (Thumb, 228 bytes, Stack size 96 bytes, lv_dropdown.o(i.draw_box_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = draw_box_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_list_event
</UL>

<P><STRONG><a name="[149]"></a>lv_dropdown_constructor</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lv_dropdown.o(i.lv_dropdown_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lv_dropdown_constructor &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>lv_dropdown_destructor</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_dropdown.o(i.lv_dropdown_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lv_dropdown_destructor &rArr; lv_obj_del &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>lv_dropdown_event</STRONG> (Thumb, 1350 bytes, Stack size 200 bytes, lv_dropdown.o(i.lv_dropdown_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = lv_dropdown_event &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_to_selected
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>lv_dropdown_list_event</STRONG> (Thumb, 670 bytes, Stack size 40 bytes, lv_dropdown.o(i.lv_dropdown_list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = lv_dropdown_list_event &rArr; draw_box_label &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box_label
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_box
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>lv_dropdownlist_constructor</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lv_dropdown.o(i.lv_dropdownlist_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lv_dropdownlist_constructor &rArr; lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>lv_dropdownlist_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_dropdown.o(i.lv_dropdownlist_destructor))
<BR>[Address Reference Count : 1]<UL><LI> lv_dropdown.o(.constdata)
</UL>
<P><STRONG><a name="[3f9]"></a>position_to_selected</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lv_dropdown.o(i.position_to_selected))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = position_to_selected &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by_bounded &rArr;  lv_obj_update_layout (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_set_selected
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_open
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dropdown_event
</UL>

<P><STRONG><a name="[32d]"></a>draw_img</STRONG> (Thumb, 1244 bytes, Stack size 152 bytes, lv_img.o(i.draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = draw_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[14f]"></a>lv_img_constructor</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_img.o(i.lv_img_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_img_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>lv_img_destructor</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_img.o(i.lv_img_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_img_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>lv_img_event</STRONG> (Thumb, 566 bytes, Stack size 40 bytes, lv_img.o(i.lv_img_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008<LI>Call Chain = lv_img_event &rArr; draw_img &rArr; lv_draw_img &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>lv_label_constructor</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = lv_label_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>lv_label_destructor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_label_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>lv_label_event</STRONG> (Thumb, 934 bytes, Stack size 120 bytes, lv_label.o(i.lv_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = lv_label_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_apply_color_filter
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.constdata)
</UL>
<P><STRONG><a name="[43d]"></a>lv_label_refr_text</STRONG> (Thumb, 1430 bytes, Stack size 128 bytes, lv_label.o(i.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_log_add
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_static
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[43c]"></a>lv_label_revert_dots</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_label_revert_dots &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[e7]"></a>set_ofs_x_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.set_ofs_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = set_ofs_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
<LI> lv_label.o(i.lv_label_constructor)
</UL>
<P><STRONG><a name="[e8]"></a>set_ofs_y_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.set_ofs_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = set_ofs_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
<LI> lv_label.o(i.lv_label_constructor)
</UL>
<P><STRONG><a name="[155]"></a>lv_line_constructor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_line.o(i.lv_line_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_line_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>lv_line_event</STRONG> (Thumb, 540 bytes, Stack size 72 bytes, lv_line.o(i.lv_line_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = lv_line_event &rArr; lv_obj_init_draw_line_dsc &rArr; _lv_obj_style_apply_color_filter &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.constdata)
</UL>
<P><STRONG><a name="[389]"></a>inf_normalize</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lv_roller.o(i.inf_normalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
</UL>

<P><STRONG><a name="[157]"></a>lv_roller_constructor</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_roller.o(i.lv_roller_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_roller_constructor &rArr; lv_roller_set_options &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_options
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>lv_roller_event</STRONG> (Thumb, 1504 bytes, Stack size 128 bytes, lv_roller.o(i.lv_roller_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = lv_roller_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_scroll_throw_predict
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_selected
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>lv_roller_label_event</STRONG> (Thumb, 560 bytes, Stack size 128 bytes, lv_roller.o(i.lv_roller_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = lv_roller_label_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_position
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_recolor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(.constdata)
</UL>
<P><STRONG><a name="[4ae]"></a>refr_position</STRONG> (Thumb, 296 bytes, Stack size 104 bytes, lv_roller.o(i.refr_position))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = refr_position &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_set_selected
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_label_event
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_roller_event
</UL>

<P><STRONG><a name="[111]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_roller.o(i.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 380<LI>Call Chain = scroll_anim_ready_cb &rArr; inf_normalize &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inf_normalize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_roller.o(i.refr_position)
</UL>
<P><STRONG><a name="[f2]"></a>set_y_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_roller.o(i.set_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = set_y_anim &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_roller.o(i.lv_roller_event)
<LI> lv_roller.o(i.refr_position)
</UL>
<P><STRONG><a name="[15a]"></a>lv_slider_constructor</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_slider.o(i.lv_slider_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = lv_slider_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>lv_slider_event</STRONG> (Thumb, 1960 bytes, Stack size 264 bytes, lv_slider.o(i.lv_slider_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = lv_slider_event &rArr; lv_bar_set_value &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_start_value
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_mode
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.constdata)
</UL>
<P><STRONG><a name="[4b5]"></a>position_knob</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lv_slider.o(i.position_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = position_knob &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[fd]"></a>lv_switch_anim_exec_cb</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_switch.o(i.lv_switch_anim_exec_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_switch_anim_exec_cb &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(i.lv_switch_event)
</UL>
<P><STRONG><a name="[fe]"></a>lv_switch_anim_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_switch.o(i.lv_switch_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = lv_switch_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(i.lv_switch_event)
</UL>
<P><STRONG><a name="[15c]"></a>lv_switch_constructor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_switch.o(i.lv_switch_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = lv_switch_constructor &rArr; lv_obj_add_flag &rArr; lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>lv_switch_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_switch.o(i.lv_switch_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_switch_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>lv_switch_event</STRONG> (Thumb, 722 bytes, Stack size 200 bytes, lv_switch.o(i.lv_switch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = lv_switch_event &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_switch.o(.constdata)
</UL>
<P><STRONG><a name="[335]"></a>draw_main</STRONG> (Thumb, 1264 bytes, Stack size 432 bytes, lv_table.o(i.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[372]"></a>get_cell_area</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, lv_table.o(i.get_cell_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = get_cell_area &rArr; lv_obj_get_style_prop &rArr; lv_style_get_prop &rArr; lv_style_prop_get_default
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[15f]"></a>lv_table_constructor</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lv_table.o(i.lv_table_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_table_constructor &rArr; lv_mem_realloc &rArr; lv_tlsf_realloc &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>lv_table_destructor</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lv_table.o(i.lv_table_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_table_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>lv_table_event</STRONG> (Thumb, 1062 bytes, Stack size 40 bytes, lv_table.o(i.lv_table_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = lv_table_event &rArr; draw_main &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by_bounded
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_size_form_row
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cell_area
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_table.o(.constdata)
</UL>
<P><STRONG><a name="[4ea]"></a>refr_size_form_row</STRONG> (Thumb, 506 bytes, Stack size 176 bytes, lv_table.o(i.refr_size_form_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = refr_size_form_row &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_table_event
</UL>

<P><STRONG><a name="[bc]"></a>cursor_blink_anim_cb</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lv_textarea.o(i.cursor_blink_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = cursor_blink_anim_cb &rArr; lv_obj_invalidate_area &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>
<BR>[Address Reference Count : 4]<UL><LI> lv_textarea.o(i.label_event_cb)
<LI> lv_textarea.o(i.lv_textarea_constructor)
<LI> lv_textarea.o(i.lv_textarea_event)
<LI> lv_textarea.o(i.lv_textarea_set_cursor_pos)
</UL>
<P><STRONG><a name="[38b]"></a>insert_handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_textarea.o(i.insert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = insert_handler &rArr;  lv_textarea_add_text (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
</UL>

<P><STRONG><a name="[103]"></a>label_event_cb</STRONG> (Thumb, 140 bytes, Stack size 88 bytes, lv_textarea.o(i.label_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = label_event_cb &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(i.lv_textarea_constructor)
</UL>
<P><STRONG><a name="[162]"></a>lv_textarea_constructor</STRONG> (Thumb, 224 bytes, Stack size 80 bytes, lv_textarea.o(i.lv_textarea_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 716<LI>Call Chain = lv_textarea_constructor &rArr; lv_textarea_set_cursor_pos &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>lv_textarea_destructor</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_textarea.o(i.lv_textarea_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_textarea_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>lv_textarea_event</STRONG> (Thumb, 1480 bytes, Stack size 168 bytes, lv_textarea.o(i.lv_textarea_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = lv_textarea_event &rArr; lv_textarea_add_char &rArr; lv_textarea_add_text &rArr;  lv_textarea_add_char (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_del_char
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_is_char_under_pos
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_textarea.o(.constdata)
</UL>
<P><STRONG><a name="[4eb]"></a>pwd_char_hider</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, lv_textarea.o(i.pwd_char_hider))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refr_cursor_area
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_text
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_add_char
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_text
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider_anim_ready
</UL>

<P><STRONG><a name="[101]"></a>pwd_char_hider_anim</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_textarea.o(i.pwd_char_hider_anim))
<BR>[Address Reference Count : 3]<UL><LI> lv_textarea.o(i.lv_textarea_add_char)
<LI> lv_textarea.o(i.lv_textarea_add_text)
<LI> lv_textarea.o(i.lv_textarea_set_text)
</UL>
<P><STRONG><a name="[102]"></a>pwd_char_hider_anim_ready</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_textarea.o(i.pwd_char_hider_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = pwd_char_hider_anim_ready &rArr; pwd_char_hider &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_textarea.o(i.lv_textarea_add_char)
<LI> lv_textarea.o(i.lv_textarea_add_text)
<LI> lv_textarea.o(i.lv_textarea_set_text)
</UL>
<P><STRONG><a name="[399]"></a>refr_cursor_area</STRONG> (Thumb, 508 bytes, Stack size 56 bytes, lv_textarea.o(i.refr_cursor_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = refr_cursor_area &rArr; lv_label_get_letter_pos &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_text
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_cursor_pos
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_set_password_mode
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwd_char_hider
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;label_event_cb
</UL>

<P><STRONG><a name="[165]"></a>lv_dclock_constructor</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_dclock.o(i.lv_dclock_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_dclock_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_invalidate &rArr; lv_obj_area_is_visible &rArr; lv_obj_get_transformed_area &rArr; lv_obj_transform_point &rArr;  lv_obj_transform_point (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dclock.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>lv_dclock_destructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_dclock.o(i.lv_dclock_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_dclock_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; remove_free_block &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dclock.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>lv_dclock_event</STRONG> (Thumb, 448 bytes, Stack size 88 bytes, lv_dclock.o(i.lv_dclock_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = lv_dclock_event &rArr; lv_draw_label &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_draw_ctx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_set_ext_draw_size
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_dclock.o(.constdata)
</UL>
<P><STRONG><a name="[3cc]"></a>lv_dclock_refr_text</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, lv_dclock.o(i.lv_dclock_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = lv_dclock_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_set_text_fmt
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_dclock_event
</UL>

<P><STRONG><a name="[8e]"></a>character_btn_1_event_handler</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, events_init.o(i.character_btn_1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = character_btn_1_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_character)
</UL>
<P><STRONG><a name="[8f]"></a>character_btn_3_event_handler</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.character_btn_3_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = character_btn_3_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_character)
</UL>
<P><STRONG><a name="[8c]"></a>character_img_1_event_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, events_init.o(i.character_img_1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = character_img_1_event_handler &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_character)
</UL>
<P><STRONG><a name="[8d]"></a>character_img_2_event_handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, events_init.o(i.character_img_2_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = character_img_2_event_handler &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_character)
</UL>
<P><STRONG><a name="[91]"></a>end_btn_2_event_handler</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, events_init.o(i.end_btn_2_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = end_btn_2_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_end)
</UL>
<P><STRONG><a name="[90]"></a>end_label_3_event_handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, events_init.o(i.end_label_3_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = end_label_3_event_handler &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_end)
</UL>
<P><STRONG><a name="[99]"></a>game1_event_handler</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, events_init.o(i.game1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = game1_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game1)
</UL>
<P><STRONG><a name="[9a]"></a>game2_event_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, events_init.o(i.game2_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = game2_event_handler &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game2)
</UL>
<P><STRONG><a name="[9b]"></a>game3_event_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, events_init.o(i.game3_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = game3_event_handler &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game3)
</UL>
<P><STRONG><a name="[9c]"></a>game4_event_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, events_init.o(i.game4_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = game4_event_handler &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game4)
</UL>
<P><STRONG><a name="[9d]"></a>game5_event_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, events_init.o(i.game5_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = game5_event_handler &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game5)
</UL>
<P><STRONG><a name="[93]"></a>game_btn_1_event_handler</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, events_init.o(i.game_btn_1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = game_btn_1_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game)
</UL>
<P><STRONG><a name="[94]"></a>game_btn_2_event_handler</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.game_btn_2_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = game_btn_2_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game)
</UL>
<P><STRONG><a name="[95]"></a>game_btn_3_event_handler</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.game_btn_3_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = game_btn_3_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game)
</UL>
<P><STRONG><a name="[96]"></a>game_btn_4_event_handler</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.game_btn_4_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = game_btn_4_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game)
</UL>
<P><STRONG><a name="[97]"></a>game_btn_5_event_handler</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.game_btn_5_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = game_btn_5_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game)
</UL>
<P><STRONG><a name="[98]"></a>game_btn_6_event_handler</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.game_btn_6_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = game_btn_6_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game)
</UL>
<P><STRONG><a name="[92]"></a>game_event_handler</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, events_init.o(i.game_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = game_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_game)
</UL>
<P><STRONG><a name="[9e]"></a>home_btn_2_event_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, events_init.o(i.home_btn_2_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = home_btn_2_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_home)
</UL>
<P><STRONG><a name="[9f]"></a>home_btn_3_event_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, events_init.o(i.home_btn_3_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = home_btn_3_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_home)
</UL>
<P><STRONG><a name="[a0]"></a>pause_event_handler</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, events_init.o(i.pause_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = pause_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_pause)
</UL>
<P><STRONG><a name="[a1]"></a>screen_1_event_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, events_init.o(i.screen_1_event_handler))
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_screen_1)
</UL>
<P><STRONG><a name="[a2]"></a>screen_1_ta_1_event_handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, events_init.o(i.screen_1_ta_1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = screen_1_ta_1_event_handler &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_split &rArr; block_next &rArr; _lv_log_add &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_textarea_get_text
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_screen_1)
</UL>
<P><STRONG><a name="[a3]"></a>settings_btn_1_event_handler</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, events_init.o(i.settings_btn_1_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 620<LI>Call Chain = settings_btn_1_event_handler &rArr; ui_load_scr_animation &rArr; lv_scr_load_anim &rArr; lv_obj_set_pos &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ui_load_scr_animation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_settings)
</UL>
<P><STRONG><a name="[a6]"></a>settings_btn_2_event_handler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, events_init.o(i.settings_btn_2_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = settings_btn_2_event_handler &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_settings)
</UL>
<P><STRONG><a name="[a5]"></a>settings_btn_3_event_handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, events_init.o(i.settings_btn_3_event_handler))
<BR><BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_settings)
</UL>
<P><STRONG><a name="[a4]"></a>settings_btn_4_event_handler</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, events_init.o(i.settings_btn_4_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = settings_btn_4_event_handler &rArr; W25QXX_RTOS &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_RTOS
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
</UL>
<BR>[Address Reference Count : 1]<UL><LI> events_init.o(i.events_init_settings)
</UL>
<P><STRONG><a name="[2f9]"></a>create_chain</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[300]"></a>dir_find</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[305]"></a>dir_next</STRONG> (Thumb, 368 bytes, Stack size 40 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[308]"></a>dir_register</STRONG> (Thumb, 808 bytes, Stack size 64 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[301]"></a>dir_sdi</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[359]"></a>find_volume</STRONG> (Thumb, 1184 bytes, Stack size 56 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = find_volume &rArr; ff_req_grant &rArr; osSemaphoreWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[35a]"></a>follow_path</STRONG> (Thumb, 686 bytes, Stack size 48 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2fa]"></a>get_fat</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[309]"></a>mem_cpy</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[306]"></a>mem_set</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[30a]"></a>move_window</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[2fb]"></a>put_fat</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[35c]"></a>remove_chain</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[302]"></a>sync_window</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[355]"></a>validate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = validate &rArr; ff_rel_grant &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[268]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[250]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[2ce]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2cd]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[68]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
